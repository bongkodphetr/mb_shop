"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sweetalert2";
exports.ids = ["vendor-chunks/sweetalert2"];
exports.modules = {

/***/ "(ssr)/./node_modules/sweetalert2/dist/sweetalert2.esm.all.js":
/*!**************************************************************!*\
  !*** ./node_modules/sweetalert2/dist/sweetalert2.esm.all.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Swal)\n/* harmony export */ });\n/*!\r\n* sweetalert2 v11.15.10\r\n* Released under the MIT License.\r\n*/\r\nfunction _assertClassBrand(e, t, n) {\r\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\r\n  throw new TypeError(\"Private element is not present on this object\");\r\n}\r\nfunction _checkPrivateRedeclaration(e, t) {\r\n  if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\r\n}\r\nfunction _classPrivateFieldGet2(s, a) {\r\n  return s.get(_assertClassBrand(s, a));\r\n}\r\nfunction _classPrivateFieldInitSpec(e, t, a) {\r\n  _checkPrivateRedeclaration(e, t), t.set(e, a);\r\n}\r\nfunction _classPrivateFieldSet2(s, a, r) {\r\n  return s.set(_assertClassBrand(s, a), r), r;\r\n}\r\n\r\nconst RESTORE_FOCUS_TIMEOUT = 100;\r\n\r\n/** @type {GlobalState} */\r\nconst globalState = {};\r\nconst focusPreviousActiveElement = () => {\r\n  if (globalState.previousActiveElement instanceof HTMLElement) {\r\n    globalState.previousActiveElement.focus();\r\n    globalState.previousActiveElement = null;\r\n  } else if (document.body) {\r\n    document.body.focus();\r\n  }\r\n};\r\n\r\n/**\r\n * Restore previous active (focused) element\r\n *\r\n * @param {boolean} returnFocus\r\n * @returns {Promise<void>}\r\n */\r\nconst restoreActiveElement = returnFocus => {\r\n  return new Promise(resolve => {\r\n    if (!returnFocus) {\r\n      return resolve();\r\n    }\r\n    const x = window.scrollX;\r\n    const y = window.scrollY;\r\n    globalState.restoreFocusTimeout = setTimeout(() => {\r\n      focusPreviousActiveElement();\r\n      resolve();\r\n    }, RESTORE_FOCUS_TIMEOUT); // issues/900\r\n\r\n    window.scrollTo(x, y);\r\n  });\r\n};\r\n\r\nconst swalPrefix = 'swal2-';\r\n\r\n/**\r\n * @typedef {Record<SwalClass, string>} SwalClasses\r\n */\r\n\r\n/**\r\n * @typedef {'success' | 'warning' | 'info' | 'question' | 'error'} SwalIcon\r\n * @typedef {Record<SwalIcon, string>} SwalIcons\r\n */\r\n\r\n/** @type {SwalClass[]} */\r\nconst classNames = ['container', 'shown', 'height-auto', 'iosfix', 'popup', 'modal', 'no-backdrop', 'no-transition', 'toast', 'toast-shown', 'show', 'hide', 'close', 'title', 'html-container', 'actions', 'confirm', 'deny', 'cancel', 'default-outline', 'footer', 'icon', 'icon-content', 'image', 'input', 'file', 'range', 'select', 'radio', 'checkbox', 'label', 'textarea', 'inputerror', 'input-label', 'validation-message', 'progress-steps', 'active-progress-step', 'progress-step', 'progress-step-line', 'loader', 'loading', 'styled', 'top', 'top-start', 'top-end', 'top-left', 'top-right', 'center', 'center-start', 'center-end', 'center-left', 'center-right', 'bottom', 'bottom-start', 'bottom-end', 'bottom-left', 'bottom-right', 'grow-row', 'grow-column', 'grow-fullscreen', 'rtl', 'timer-progress-bar', 'timer-progress-bar-container', 'scrollbar-measure', 'icon-success', 'icon-warning', 'icon-info', 'icon-question', 'icon-error', 'draggable', 'dragging'];\r\nconst swalClasses = classNames.reduce((acc, className) => {\r\n  acc[className] = swalPrefix + className;\r\n  return acc;\r\n}, /** @type {SwalClasses} */{});\r\n\r\n/** @type {SwalIcon[]} */\r\nconst icons = ['success', 'warning', 'info', 'question', 'error'];\r\nconst iconTypes = icons.reduce((acc, icon) => {\r\n  acc[icon] = swalPrefix + icon;\r\n  return acc;\r\n}, /** @type {SwalIcons} */{});\r\n\r\nconst consolePrefix = 'SweetAlert2:';\r\n\r\n/**\r\n * Capitalize the first letter of a string\r\n *\r\n * @param {string} str\r\n * @returns {string}\r\n */\r\nconst capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);\r\n\r\n/**\r\n * Standardize console warnings\r\n *\r\n * @param {string | string[]} message\r\n */\r\nconst warn = message => {\r\n  console.warn(`${consolePrefix} ${typeof message === 'object' ? message.join(' ') : message}`);\r\n};\r\n\r\n/**\r\n * Standardize console errors\r\n *\r\n * @param {string} message\r\n */\r\nconst error = message => {\r\n  console.error(`${consolePrefix} ${message}`);\r\n};\r\n\r\n/**\r\n * Private global state for `warnOnce`\r\n *\r\n * @type {string[]}\r\n * @private\r\n */\r\nconst previousWarnOnceMessages = [];\r\n\r\n/**\r\n * Show a console warning, but only if it hasn't already been shown\r\n *\r\n * @param {string} message\r\n */\r\nconst warnOnce = message => {\r\n  if (!previousWarnOnceMessages.includes(message)) {\r\n    previousWarnOnceMessages.push(message);\r\n    warn(message);\r\n  }\r\n};\r\n\r\n/**\r\n * Show a one-time console warning about deprecated params/methods\r\n *\r\n * @param {string} deprecatedParam\r\n * @param {string?} useInstead\r\n */\r\nconst warnAboutDeprecation = function (deprecatedParam) {\r\n  let useInstead = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\r\n  warnOnce(`\"${deprecatedParam}\" is deprecated and will be removed in the next major release.${useInstead ? ` Use \"${useInstead}\" instead.` : ''}`);\r\n};\r\n\r\n/**\r\n * If `arg` is a function, call it (with no arguments or context) and return the result.\r\n * Otherwise, just pass the value through\r\n *\r\n * @param {Function | any} arg\r\n * @returns {any}\r\n */\r\nconst callIfFunction = arg => typeof arg === 'function' ? arg() : arg;\r\n\r\n/**\r\n * @param {any} arg\r\n * @returns {boolean}\r\n */\r\nconst hasToPromiseFn = arg => arg && typeof arg.toPromise === 'function';\r\n\r\n/**\r\n * @param {any} arg\r\n * @returns {Promise<any>}\r\n */\r\nconst asPromise = arg => hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg);\r\n\r\n/**\r\n * @param {any} arg\r\n * @returns {boolean}\r\n */\r\nconst isPromise = arg => arg && Promise.resolve(arg) === arg;\r\n\r\n/**\r\n * Gets the popup container which contains the backdrop and the popup itself.\r\n *\r\n * @returns {HTMLElement | null}\r\n */\r\nconst getContainer = () => document.body.querySelector(`.${swalClasses.container}`);\r\n\r\n/**\r\n * @param {string} selectorString\r\n * @returns {HTMLElement | null}\r\n */\r\nconst elementBySelector = selectorString => {\r\n  const container = getContainer();\r\n  return container ? container.querySelector(selectorString) : null;\r\n};\r\n\r\n/**\r\n * @param {string} className\r\n * @returns {HTMLElement | null}\r\n */\r\nconst elementByClass = className => {\r\n  return elementBySelector(`.${className}`);\r\n};\r\n\r\n/**\r\n * @returns {HTMLElement | null}\r\n */\r\nconst getPopup = () => elementByClass(swalClasses.popup);\r\n\r\n/**\r\n * @returns {HTMLElement | null}\r\n */\r\nconst getIcon = () => elementByClass(swalClasses.icon);\r\n\r\n/**\r\n * @returns {HTMLElement | null}\r\n */\r\nconst getIconContent = () => elementByClass(swalClasses['icon-content']);\r\n\r\n/**\r\n * @returns {HTMLElement | null}\r\n */\r\nconst getTitle = () => elementByClass(swalClasses.title);\r\n\r\n/**\r\n * @returns {HTMLElement | null}\r\n */\r\nconst getHtmlContainer = () => elementByClass(swalClasses['html-container']);\r\n\r\n/**\r\n * @returns {HTMLElement | null}\r\n */\r\nconst getImage = () => elementByClass(swalClasses.image);\r\n\r\n/**\r\n * @returns {HTMLElement | null}\r\n */\r\nconst getProgressSteps = () => elementByClass(swalClasses['progress-steps']);\r\n\r\n/**\r\n * @returns {HTMLElement | null}\r\n */\r\nconst getValidationMessage = () => elementByClass(swalClasses['validation-message']);\r\n\r\n/**\r\n * @returns {HTMLButtonElement | null}\r\n */\r\nconst getConfirmButton = () => (/** @type {HTMLButtonElement} */elementBySelector(`.${swalClasses.actions} .${swalClasses.confirm}`));\r\n\r\n/**\r\n * @returns {HTMLButtonElement | null}\r\n */\r\nconst getCancelButton = () => (/** @type {HTMLButtonElement} */elementBySelector(`.${swalClasses.actions} .${swalClasses.cancel}`));\r\n\r\n/**\r\n * @returns {HTMLButtonElement | null}\r\n */\r\nconst getDenyButton = () => (/** @type {HTMLButtonElement} */elementBySelector(`.${swalClasses.actions} .${swalClasses.deny}`));\r\n\r\n/**\r\n * @returns {HTMLElement | null}\r\n */\r\nconst getInputLabel = () => elementByClass(swalClasses['input-label']);\r\n\r\n/**\r\n * @returns {HTMLElement | null}\r\n */\r\nconst getLoader = () => elementBySelector(`.${swalClasses.loader}`);\r\n\r\n/**\r\n * @returns {HTMLElement | null}\r\n */\r\nconst getActions = () => elementByClass(swalClasses.actions);\r\n\r\n/**\r\n * @returns {HTMLElement | null}\r\n */\r\nconst getFooter = () => elementByClass(swalClasses.footer);\r\n\r\n/**\r\n * @returns {HTMLElement | null}\r\n */\r\nconst getTimerProgressBar = () => elementByClass(swalClasses['timer-progress-bar']);\r\n\r\n/**\r\n * @returns {HTMLElement | null}\r\n */\r\nconst getCloseButton = () => elementByClass(swalClasses.close);\r\n\r\n// https://github.com/jkup/focusable/blob/master/index.js\r\nconst focusable = `\r\n  a[href],\r\n  area[href],\r\n  input:not([disabled]),\r\n  select:not([disabled]),\r\n  textarea:not([disabled]),\r\n  button:not([disabled]),\r\n  iframe,\r\n  object,\r\n  embed,\r\n  [tabindex=\"0\"],\r\n  [contenteditable],\r\n  audio[controls],\r\n  video[controls],\r\n  summary\r\n`;\r\n/**\r\n * @returns {HTMLElement[]}\r\n */\r\nconst getFocusableElements = () => {\r\n  const popup = getPopup();\r\n  if (!popup) {\r\n    return [];\r\n  }\r\n  /** @type {NodeListOf<HTMLElement>} */\r\n  const focusableElementsWithTabindex = popup.querySelectorAll('[tabindex]:not([tabindex=\"-1\"]):not([tabindex=\"0\"])');\r\n  const focusableElementsWithTabindexSorted = Array.from(focusableElementsWithTabindex)\r\n  // sort according to tabindex\r\n  .sort((a, b) => {\r\n    const tabindexA = parseInt(a.getAttribute('tabindex') || '0');\r\n    const tabindexB = parseInt(b.getAttribute('tabindex') || '0');\r\n    if (tabindexA > tabindexB) {\r\n      return 1;\r\n    } else if (tabindexA < tabindexB) {\r\n      return -1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  /** @type {NodeListOf<HTMLElement>} */\r\n  const otherFocusableElements = popup.querySelectorAll(focusable);\r\n  const otherFocusableElementsFiltered = Array.from(otherFocusableElements).filter(el => el.getAttribute('tabindex') !== '-1');\r\n  return [...new Set(focusableElementsWithTabindexSorted.concat(otherFocusableElementsFiltered))].filter(el => isVisible$1(el));\r\n};\r\n\r\n/**\r\n * @returns {boolean}\r\n */\r\nconst isModal = () => {\r\n  return hasClass(document.body, swalClasses.shown) && !hasClass(document.body, swalClasses['toast-shown']) && !hasClass(document.body, swalClasses['no-backdrop']);\r\n};\r\n\r\n/**\r\n * @returns {boolean}\r\n */\r\nconst isToast = () => {\r\n  const popup = getPopup();\r\n  if (!popup) {\r\n    return false;\r\n  }\r\n  return hasClass(popup, swalClasses.toast);\r\n};\r\n\r\n/**\r\n * @returns {boolean}\r\n */\r\nconst isLoading = () => {\r\n  const popup = getPopup();\r\n  if (!popup) {\r\n    return false;\r\n  }\r\n  return popup.hasAttribute('data-loading');\r\n};\r\n\r\n/**\r\n * Securely set innerHTML of an element\r\n * https://github.com/sweetalert2/sweetalert2/issues/1926\r\n *\r\n * @param {HTMLElement} elem\r\n * @param {string} html\r\n */\r\nconst setInnerHtml = (elem, html) => {\r\n  elem.textContent = '';\r\n  if (html) {\r\n    const parser = new DOMParser();\r\n    const parsed = parser.parseFromString(html, `text/html`);\r\n    const head = parsed.querySelector('head');\r\n    if (head) {\r\n      Array.from(head.childNodes).forEach(child => {\r\n        elem.appendChild(child);\r\n      });\r\n    }\r\n    const body = parsed.querySelector('body');\r\n    if (body) {\r\n      Array.from(body.childNodes).forEach(child => {\r\n        if (child instanceof HTMLVideoElement || child instanceof HTMLAudioElement) {\r\n          elem.appendChild(child.cloneNode(true)); // https://github.com/sweetalert2/sweetalert2/issues/2507\r\n        } else {\r\n          elem.appendChild(child);\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} elem\r\n * @param {string} className\r\n * @returns {boolean}\r\n */\r\nconst hasClass = (elem, className) => {\r\n  if (!className) {\r\n    return false;\r\n  }\r\n  const classList = className.split(/\\s+/);\r\n  for (let i = 0; i < classList.length; i++) {\r\n    if (!elem.classList.contains(classList[i])) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} elem\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst removeCustomClasses = (elem, params) => {\r\n  Array.from(elem.classList).forEach(className => {\r\n    if (!Object.values(swalClasses).includes(className) && !Object.values(iconTypes).includes(className) && !Object.values(params.showClass || {}).includes(className)) {\r\n      elem.classList.remove(className);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} elem\r\n * @param {SweetAlertOptions} params\r\n * @param {string} className\r\n */\r\nconst applyCustomClass = (elem, params, className) => {\r\n  removeCustomClasses(elem, params);\r\n  if (!params.customClass) {\r\n    return;\r\n  }\r\n  const customClass = params.customClass[(/** @type {keyof SweetAlertCustomClass} */className)];\r\n  if (!customClass) {\r\n    return;\r\n  }\r\n  if (typeof customClass !== 'string' && !customClass.forEach) {\r\n    warn(`Invalid type of customClass.${className}! Expected string or iterable object, got \"${typeof customClass}\"`);\r\n    return;\r\n  }\r\n  addClass(elem, customClass);\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} popup\r\n * @param {import('./renderers/renderInput').InputClass | SweetAlertInput} inputClass\r\n * @returns {HTMLInputElement | null}\r\n */\r\nconst getInput$1 = (popup, inputClass) => {\r\n  if (!inputClass) {\r\n    return null;\r\n  }\r\n  switch (inputClass) {\r\n    case 'select':\r\n    case 'textarea':\r\n    case 'file':\r\n      return popup.querySelector(`.${swalClasses.popup} > .${swalClasses[inputClass]}`);\r\n    case 'checkbox':\r\n      return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.checkbox} input`);\r\n    case 'radio':\r\n      return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.radio} input:checked`) || popup.querySelector(`.${swalClasses.popup} > .${swalClasses.radio} input:first-child`);\r\n    case 'range':\r\n      return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.range} input`);\r\n    default:\r\n      return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.input}`);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement} input\r\n */\r\nconst focusInput = input => {\r\n  input.focus();\r\n\r\n  // place cursor at end of text in text input\r\n  if (input.type !== 'file') {\r\n    // http://stackoverflow.com/a/2345915\r\n    const val = input.value;\r\n    input.value = '';\r\n    input.value = val;\r\n  }\r\n};\r\n\r\n/**\r\n * @param {HTMLElement | HTMLElement[] | null} target\r\n * @param {string | string[] | readonly string[] | undefined} classList\r\n * @param {boolean} condition\r\n */\r\nconst toggleClass = (target, classList, condition) => {\r\n  if (!target || !classList) {\r\n    return;\r\n  }\r\n  if (typeof classList === 'string') {\r\n    classList = classList.split(/\\s+/).filter(Boolean);\r\n  }\r\n  classList.forEach(className => {\r\n    if (Array.isArray(target)) {\r\n      target.forEach(elem => {\r\n        if (condition) {\r\n          elem.classList.add(className);\r\n        } else {\r\n          elem.classList.remove(className);\r\n        }\r\n      });\r\n    } else {\r\n      if (condition) {\r\n        target.classList.add(className);\r\n      } else {\r\n        target.classList.remove(className);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * @param {HTMLElement | HTMLElement[] | null} target\r\n * @param {string | string[] | readonly string[] | undefined} classList\r\n */\r\nconst addClass = (target, classList) => {\r\n  toggleClass(target, classList, true);\r\n};\r\n\r\n/**\r\n * @param {HTMLElement | HTMLElement[] | null} target\r\n * @param {string | string[] | readonly string[] | undefined} classList\r\n */\r\nconst removeClass = (target, classList) => {\r\n  toggleClass(target, classList, false);\r\n};\r\n\r\n/**\r\n * Get direct child of an element by class name\r\n *\r\n * @param {HTMLElement} elem\r\n * @param {string} className\r\n * @returns {HTMLElement | undefined}\r\n */\r\nconst getDirectChildByClass = (elem, className) => {\r\n  const children = Array.from(elem.children);\r\n  for (let i = 0; i < children.length; i++) {\r\n    const child = children[i];\r\n    if (child instanceof HTMLElement && hasClass(child, className)) {\r\n      return child;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} elem\r\n * @param {string} property\r\n * @param {*} value\r\n */\r\nconst applyNumericalStyle = (elem, property, value) => {\r\n  if (value === `${parseInt(value)}`) {\r\n    value = parseInt(value);\r\n  }\r\n  if (value || parseInt(value) === 0) {\r\n    elem.style.setProperty(property, typeof value === 'number' ? `${value}px` : value);\r\n  } else {\r\n    elem.style.removeProperty(property);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {HTMLElement | null} elem\r\n * @param {string} display\r\n */\r\nconst show = function (elem) {\r\n  let display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'flex';\r\n  if (!elem) {\r\n    return;\r\n  }\r\n  elem.style.display = display;\r\n};\r\n\r\n/**\r\n * @param {HTMLElement | null} elem\r\n */\r\nconst hide = elem => {\r\n  if (!elem) {\r\n    return;\r\n  }\r\n  elem.style.display = 'none';\r\n};\r\n\r\n/**\r\n * @param {HTMLElement | null} elem\r\n * @param {string} display\r\n */\r\nconst showWhenInnerHtmlPresent = function (elem) {\r\n  let display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'block';\r\n  if (!elem) {\r\n    return;\r\n  }\r\n  new MutationObserver(() => {\r\n    toggle(elem, elem.innerHTML, display);\r\n  }).observe(elem, {\r\n    childList: true,\r\n    subtree: true\r\n  });\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} parent\r\n * @param {string} selector\r\n * @param {string} property\r\n * @param {string} value\r\n */\r\nconst setStyle = (parent, selector, property, value) => {\r\n  /** @type {HTMLElement | null} */\r\n  const el = parent.querySelector(selector);\r\n  if (el) {\r\n    el.style.setProperty(property, value);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} elem\r\n * @param {any} condition\r\n * @param {string} display\r\n */\r\nconst toggle = function (elem, condition) {\r\n  let display = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'flex';\r\n  if (condition) {\r\n    show(elem, display);\r\n  } else {\r\n    hide(elem);\r\n  }\r\n};\r\n\r\n/**\r\n * borrowed from jquery $(elem).is(':visible') implementation\r\n *\r\n * @param {HTMLElement | null} elem\r\n * @returns {boolean}\r\n */\r\nconst isVisible$1 = elem => !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));\r\n\r\n/**\r\n * @returns {boolean}\r\n */\r\nconst allButtonsAreHidden = () => !isVisible$1(getConfirmButton()) && !isVisible$1(getDenyButton()) && !isVisible$1(getCancelButton());\r\n\r\n/**\r\n * @param {HTMLElement} elem\r\n * @returns {boolean}\r\n */\r\nconst isScrollable = elem => !!(elem.scrollHeight > elem.clientHeight);\r\n\r\n/**\r\n * borrowed from https://stackoverflow.com/a/46352119\r\n *\r\n * @param {HTMLElement} elem\r\n * @returns {boolean}\r\n */\r\nconst hasCssAnimation = elem => {\r\n  const style = window.getComputedStyle(elem);\r\n  const animDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');\r\n  const transDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');\r\n  return animDuration > 0 || transDuration > 0;\r\n};\r\n\r\n/**\r\n * @param {number} timer\r\n * @param {boolean} reset\r\n */\r\nconst animateTimerProgressBar = function (timer) {\r\n  let reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n  const timerProgressBar = getTimerProgressBar();\r\n  if (!timerProgressBar) {\r\n    return;\r\n  }\r\n  if (isVisible$1(timerProgressBar)) {\r\n    if (reset) {\r\n      timerProgressBar.style.transition = 'none';\r\n      timerProgressBar.style.width = '100%';\r\n    }\r\n    setTimeout(() => {\r\n      timerProgressBar.style.transition = `width ${timer / 1000}s linear`;\r\n      timerProgressBar.style.width = '0%';\r\n    }, 10);\r\n  }\r\n};\r\nconst stopTimerProgressBar = () => {\r\n  const timerProgressBar = getTimerProgressBar();\r\n  if (!timerProgressBar) {\r\n    return;\r\n  }\r\n  const timerProgressBarWidth = parseInt(window.getComputedStyle(timerProgressBar).width);\r\n  timerProgressBar.style.removeProperty('transition');\r\n  timerProgressBar.style.width = '100%';\r\n  const timerProgressBarFullWidth = parseInt(window.getComputedStyle(timerProgressBar).width);\r\n  const timerProgressBarPercent = timerProgressBarWidth / timerProgressBarFullWidth * 100;\r\n  timerProgressBar.style.width = `${timerProgressBarPercent}%`;\r\n};\r\n\r\n/**\r\n * Detect Node env\r\n *\r\n * @returns {boolean}\r\n */\r\nconst isNodeEnv = () => typeof window === 'undefined' || typeof document === 'undefined';\r\n\r\nconst sweetHTML = `\r\n <div aria-labelledby=\"${swalClasses.title}\" aria-describedby=\"${swalClasses['html-container']}\" class=\"${swalClasses.popup}\" tabindex=\"-1\">\r\n   <button type=\"button\" class=\"${swalClasses.close}\"></button>\r\n   <ul class=\"${swalClasses['progress-steps']}\"></ul>\r\n   <div class=\"${swalClasses.icon}\"></div>\r\n   <img class=\"${swalClasses.image}\" />\r\n   <h2 class=\"${swalClasses.title}\" id=\"${swalClasses.title}\"></h2>\r\n   <div class=\"${swalClasses['html-container']}\" id=\"${swalClasses['html-container']}\"></div>\r\n   <input class=\"${swalClasses.input}\" id=\"${swalClasses.input}\" />\r\n   <input type=\"file\" class=\"${swalClasses.file}\" />\r\n   <div class=\"${swalClasses.range}\">\r\n     <input type=\"range\" />\r\n     <output></output>\r\n   </div>\r\n   <select class=\"${swalClasses.select}\" id=\"${swalClasses.select}\"></select>\r\n   <div class=\"${swalClasses.radio}\"></div>\r\n   <label class=\"${swalClasses.checkbox}\">\r\n     <input type=\"checkbox\" id=\"${swalClasses.checkbox}\" />\r\n     <span class=\"${swalClasses.label}\"></span>\r\n   </label>\r\n   <textarea class=\"${swalClasses.textarea}\" id=\"${swalClasses.textarea}\"></textarea>\r\n   <div class=\"${swalClasses['validation-message']}\" id=\"${swalClasses['validation-message']}\"></div>\r\n   <div class=\"${swalClasses.actions}\">\r\n     <div class=\"${swalClasses.loader}\"></div>\r\n     <button type=\"button\" class=\"${swalClasses.confirm}\"></button>\r\n     <button type=\"button\" class=\"${swalClasses.deny}\"></button>\r\n     <button type=\"button\" class=\"${swalClasses.cancel}\"></button>\r\n   </div>\r\n   <div class=\"${swalClasses.footer}\"></div>\r\n   <div class=\"${swalClasses['timer-progress-bar-container']}\">\r\n     <div class=\"${swalClasses['timer-progress-bar']}\"></div>\r\n   </div>\r\n </div>\r\n`.replace(/(^|\\n)\\s*/g, '');\r\n\r\n/**\r\n * @returns {boolean}\r\n */\r\nconst resetOldContainer = () => {\r\n  const oldContainer = getContainer();\r\n  if (!oldContainer) {\r\n    return false;\r\n  }\r\n  oldContainer.remove();\r\n  removeClass([document.documentElement, document.body], [swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['has-column']]);\r\n  return true;\r\n};\r\nconst resetValidationMessage$1 = () => {\r\n  globalState.currentInstance.resetValidationMessage();\r\n};\r\nconst addInputChangeListeners = () => {\r\n  const popup = getPopup();\r\n  const input = getDirectChildByClass(popup, swalClasses.input);\r\n  const file = getDirectChildByClass(popup, swalClasses.file);\r\n  /** @type {HTMLInputElement} */\r\n  const range = popup.querySelector(`.${swalClasses.range} input`);\r\n  /** @type {HTMLOutputElement} */\r\n  const rangeOutput = popup.querySelector(`.${swalClasses.range} output`);\r\n  const select = getDirectChildByClass(popup, swalClasses.select);\r\n  /** @type {HTMLInputElement} */\r\n  const checkbox = popup.querySelector(`.${swalClasses.checkbox} input`);\r\n  const textarea = getDirectChildByClass(popup, swalClasses.textarea);\r\n  input.oninput = resetValidationMessage$1;\r\n  file.onchange = resetValidationMessage$1;\r\n  select.onchange = resetValidationMessage$1;\r\n  checkbox.onchange = resetValidationMessage$1;\r\n  textarea.oninput = resetValidationMessage$1;\r\n  range.oninput = () => {\r\n    resetValidationMessage$1();\r\n    rangeOutput.value = range.value;\r\n  };\r\n  range.onchange = () => {\r\n    resetValidationMessage$1();\r\n    rangeOutput.value = range.value;\r\n  };\r\n};\r\n\r\n/**\r\n * @param {string | HTMLElement} target\r\n * @returns {HTMLElement}\r\n */\r\nconst getTarget = target => typeof target === 'string' ? document.querySelector(target) : target;\r\n\r\n/**\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst setupAccessibility = params => {\r\n  const popup = getPopup();\r\n  popup.setAttribute('role', params.toast ? 'alert' : 'dialog');\r\n  popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive');\r\n  if (!params.toast) {\r\n    popup.setAttribute('aria-modal', 'true');\r\n  }\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} targetElement\r\n */\r\nconst setupRTL = targetElement => {\r\n  if (window.getComputedStyle(targetElement).direction === 'rtl') {\r\n    addClass(getContainer(), swalClasses.rtl);\r\n  }\r\n};\r\n\r\n/**\r\n * Add modal + backdrop + no-war message for Russians to DOM\r\n *\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst init = params => {\r\n  // Clean up the old popup container if it exists\r\n  const oldContainerExisted = resetOldContainer();\r\n  if (isNodeEnv()) {\r\n    error('SweetAlert2 requires document to initialize');\r\n    return;\r\n  }\r\n  const container = document.createElement('div');\r\n  container.className = swalClasses.container;\r\n  if (oldContainerExisted) {\r\n    addClass(container, swalClasses['no-transition']);\r\n  }\r\n  setInnerHtml(container, sweetHTML);\r\n  const targetElement = getTarget(params.target);\r\n  targetElement.appendChild(container);\r\n  setupAccessibility(params);\r\n  setupRTL(targetElement);\r\n  addInputChangeListeners();\r\n};\r\n\r\n/**\r\n * @param {HTMLElement | object | string} param\r\n * @param {HTMLElement} target\r\n */\r\nconst parseHtmlToContainer = (param, target) => {\r\n  // DOM element\r\n  if (param instanceof HTMLElement) {\r\n    target.appendChild(param);\r\n  }\r\n\r\n  // Object\r\n  else if (typeof param === 'object') {\r\n    handleObject(param, target);\r\n  }\r\n\r\n  // Plain string\r\n  else if (param) {\r\n    setInnerHtml(target, param);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {any} param\r\n * @param {HTMLElement} target\r\n */\r\nconst handleObject = (param, target) => {\r\n  // JQuery element(s)\r\n  if (param.jquery) {\r\n    handleJqueryElem(target, param);\r\n  }\r\n\r\n  // For other objects use their string representation\r\n  else {\r\n    setInnerHtml(target, param.toString());\r\n  }\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} target\r\n * @param {any} elem\r\n */\r\nconst handleJqueryElem = (target, elem) => {\r\n  target.textContent = '';\r\n  if (0 in elem) {\r\n    for (let i = 0; i in elem; i++) {\r\n      target.appendChild(elem[i].cloneNode(true));\r\n    }\r\n  } else {\r\n    target.appendChild(elem.cloneNode(true));\r\n  }\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst renderActions = (instance, params) => {\r\n  const actions = getActions();\r\n  const loader = getLoader();\r\n  if (!actions || !loader) {\r\n    return;\r\n  }\r\n\r\n  // Actions (buttons) wrapper\r\n  if (!params.showConfirmButton && !params.showDenyButton && !params.showCancelButton) {\r\n    hide(actions);\r\n  } else {\r\n    show(actions);\r\n  }\r\n\r\n  // Custom class\r\n  applyCustomClass(actions, params, 'actions');\r\n\r\n  // Render all the buttons\r\n  renderButtons(actions, loader, params);\r\n\r\n  // Loader\r\n  setInnerHtml(loader, params.loaderHtml || '');\r\n  applyCustomClass(loader, params, 'loader');\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} actions\r\n * @param {HTMLElement} loader\r\n * @param {SweetAlertOptions} params\r\n */\r\nfunction renderButtons(actions, loader, params) {\r\n  const confirmButton = getConfirmButton();\r\n  const denyButton = getDenyButton();\r\n  const cancelButton = getCancelButton();\r\n  if (!confirmButton || !denyButton || !cancelButton) {\r\n    return;\r\n  }\r\n\r\n  // Render buttons\r\n  renderButton(confirmButton, 'confirm', params);\r\n  renderButton(denyButton, 'deny', params);\r\n  renderButton(cancelButton, 'cancel', params);\r\n  handleButtonsStyling(confirmButton, denyButton, cancelButton, params);\r\n  if (params.reverseButtons) {\r\n    if (params.toast) {\r\n      actions.insertBefore(cancelButton, confirmButton);\r\n      actions.insertBefore(denyButton, confirmButton);\r\n    } else {\r\n      actions.insertBefore(cancelButton, loader);\r\n      actions.insertBefore(denyButton, loader);\r\n      actions.insertBefore(confirmButton, loader);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} confirmButton\r\n * @param {HTMLElement} denyButton\r\n * @param {HTMLElement} cancelButton\r\n * @param {SweetAlertOptions} params\r\n */\r\nfunction handleButtonsStyling(confirmButton, denyButton, cancelButton, params) {\r\n  if (!params.buttonsStyling) {\r\n    removeClass([confirmButton, denyButton, cancelButton], swalClasses.styled);\r\n    return;\r\n  }\r\n  addClass([confirmButton, denyButton, cancelButton], swalClasses.styled);\r\n\r\n  // Buttons background colors\r\n  if (params.confirmButtonColor) {\r\n    confirmButton.style.backgroundColor = params.confirmButtonColor;\r\n    addClass(confirmButton, swalClasses['default-outline']);\r\n  }\r\n  if (params.denyButtonColor) {\r\n    denyButton.style.backgroundColor = params.denyButtonColor;\r\n    addClass(denyButton, swalClasses['default-outline']);\r\n  }\r\n  if (params.cancelButtonColor) {\r\n    cancelButton.style.backgroundColor = params.cancelButtonColor;\r\n    addClass(cancelButton, swalClasses['default-outline']);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} button\r\n * @param {'confirm' | 'deny' | 'cancel'} buttonType\r\n * @param {SweetAlertOptions} params\r\n */\r\nfunction renderButton(button, buttonType, params) {\r\n  const buttonName = /** @type {'Confirm' | 'Deny' | 'Cancel'} */capitalizeFirstLetter(buttonType);\r\n  toggle(button, params[`show${buttonName}Button`], 'inline-block');\r\n  setInnerHtml(button, params[`${buttonType}ButtonText`] || ''); // Set caption text\r\n  button.setAttribute('aria-label', params[`${buttonType}ButtonAriaLabel`] || ''); // ARIA label\r\n\r\n  // Add buttons custom classes\r\n  button.className = swalClasses[buttonType];\r\n  applyCustomClass(button, params, `${buttonType}Button`);\r\n}\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst renderCloseButton = (instance, params) => {\r\n  const closeButton = getCloseButton();\r\n  if (!closeButton) {\r\n    return;\r\n  }\r\n  setInnerHtml(closeButton, params.closeButtonHtml || '');\r\n\r\n  // Custom class\r\n  applyCustomClass(closeButton, params, 'closeButton');\r\n  toggle(closeButton, params.showCloseButton);\r\n  closeButton.setAttribute('aria-label', params.closeButtonAriaLabel || '');\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst renderContainer = (instance, params) => {\r\n  const container = getContainer();\r\n  if (!container) {\r\n    return;\r\n  }\r\n  handleBackdropParam(container, params.backdrop);\r\n  handlePositionParam(container, params.position);\r\n  handleGrowParam(container, params.grow);\r\n\r\n  // Custom class\r\n  applyCustomClass(container, params, 'container');\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} container\r\n * @param {SweetAlertOptions['backdrop']} backdrop\r\n */\r\nfunction handleBackdropParam(container, backdrop) {\r\n  if (typeof backdrop === 'string') {\r\n    container.style.background = backdrop;\r\n  } else if (!backdrop) {\r\n    addClass([document.documentElement, document.body], swalClasses['no-backdrop']);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} container\r\n * @param {SweetAlertOptions['position']} position\r\n */\r\nfunction handlePositionParam(container, position) {\r\n  if (!position) {\r\n    return;\r\n  }\r\n  if (position in swalClasses) {\r\n    addClass(container, swalClasses[position]);\r\n  } else {\r\n    warn('The \"position\" parameter is not valid, defaulting to \"center\"');\r\n    addClass(container, swalClasses.center);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} container\r\n * @param {SweetAlertOptions['grow']} grow\r\n */\r\nfunction handleGrowParam(container, grow) {\r\n  if (!grow) {\r\n    return;\r\n  }\r\n  addClass(container, swalClasses[`grow-${grow}`]);\r\n}\r\n\r\n/**\r\n * This module contains `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\r\n * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\r\n * This is the approach that Babel will probably take to implement private methods/fields\r\n *   https://github.com/tc39/proposal-private-methods\r\n *   https://github.com/babel/babel/pull/7555\r\n * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\r\n *   then we can use that language feature.\r\n */\r\n\r\nvar privateProps = {\r\n  innerParams: new WeakMap(),\r\n  domCache: new WeakMap()\r\n};\r\n\r\n/// <reference path=\"../../../../sweetalert2.d.ts\"/>\r\n\r\n\r\n/** @type {InputClass[]} */\r\nconst inputClasses = ['input', 'file', 'range', 'select', 'radio', 'checkbox', 'textarea'];\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst renderInput = (instance, params) => {\r\n  const popup = getPopup();\r\n  if (!popup) {\r\n    return;\r\n  }\r\n  const innerParams = privateProps.innerParams.get(instance);\r\n  const rerender = !innerParams || params.input !== innerParams.input;\r\n  inputClasses.forEach(inputClass => {\r\n    const inputContainer = getDirectChildByClass(popup, swalClasses[inputClass]);\r\n    if (!inputContainer) {\r\n      return;\r\n    }\r\n\r\n    // set attributes\r\n    setAttributes(inputClass, params.inputAttributes);\r\n\r\n    // set class\r\n    inputContainer.className = swalClasses[inputClass];\r\n    if (rerender) {\r\n      hide(inputContainer);\r\n    }\r\n  });\r\n  if (params.input) {\r\n    if (rerender) {\r\n      showInput(params);\r\n    }\r\n    // set custom class\r\n    setCustomClass(params);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst showInput = params => {\r\n  if (!params.input) {\r\n    return;\r\n  }\r\n  if (!renderInputType[params.input]) {\r\n    error(`Unexpected type of input! Expected ${Object.keys(renderInputType).join(' | ')}, got \"${params.input}\"`);\r\n    return;\r\n  }\r\n  const inputContainer = getInputContainer(params.input);\r\n  if (!inputContainer) {\r\n    return;\r\n  }\r\n  const input = renderInputType[params.input](inputContainer, params);\r\n  show(inputContainer);\r\n\r\n  // input autofocus\r\n  if (params.inputAutoFocus) {\r\n    setTimeout(() => {\r\n      focusInput(input);\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @param {HTMLInputElement} input\r\n */\r\nconst removeAttributes = input => {\r\n  for (let i = 0; i < input.attributes.length; i++) {\r\n    const attrName = input.attributes[i].name;\r\n    if (!['id', 'type', 'value', 'style'].includes(attrName)) {\r\n      input.removeAttribute(attrName);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * @param {InputClass} inputClass\r\n * @param {SweetAlertOptions['inputAttributes']} inputAttributes\r\n */\r\nconst setAttributes = (inputClass, inputAttributes) => {\r\n  const popup = getPopup();\r\n  if (!popup) {\r\n    return;\r\n  }\r\n  const input = getInput$1(popup, inputClass);\r\n  if (!input) {\r\n    return;\r\n  }\r\n  removeAttributes(input);\r\n  for (const attr in inputAttributes) {\r\n    input.setAttribute(attr, inputAttributes[attr]);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst setCustomClass = params => {\r\n  if (!params.input) {\r\n    return;\r\n  }\r\n  const inputContainer = getInputContainer(params.input);\r\n  if (inputContainer) {\r\n    applyCustomClass(inputContainer, params, 'input');\r\n  }\r\n};\r\n\r\n/**\r\n * @param {HTMLInputElement | HTMLTextAreaElement} input\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst setInputPlaceholder = (input, params) => {\r\n  if (!input.placeholder && params.inputPlaceholder) {\r\n    input.placeholder = params.inputPlaceholder;\r\n  }\r\n};\r\n\r\n/**\r\n * @param {Input} input\r\n * @param {Input} prependTo\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst setInputLabel = (input, prependTo, params) => {\r\n  if (params.inputLabel) {\r\n    const label = document.createElement('label');\r\n    const labelClass = swalClasses['input-label'];\r\n    label.setAttribute('for', input.id);\r\n    label.className = labelClass;\r\n    if (typeof params.customClass === 'object') {\r\n      addClass(label, params.customClass.inputLabel);\r\n    }\r\n    label.innerText = params.inputLabel;\r\n    prependTo.insertAdjacentElement('beforebegin', label);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {SweetAlertInput} inputType\r\n * @returns {HTMLElement | undefined}\r\n */\r\nconst getInputContainer = inputType => {\r\n  const popup = getPopup();\r\n  if (!popup) {\r\n    return;\r\n  }\r\n  return getDirectChildByClass(popup, swalClasses[(/** @type {SwalClass} */inputType)] || swalClasses.input);\r\n};\r\n\r\n/**\r\n * @param {HTMLInputElement | HTMLOutputElement | HTMLTextAreaElement} input\r\n * @param {SweetAlertOptions['inputValue']} inputValue\r\n */\r\nconst checkAndSetInputValue = (input, inputValue) => {\r\n  if (['string', 'number'].includes(typeof inputValue)) {\r\n    input.value = `${inputValue}`;\r\n  } else if (!isPromise(inputValue)) {\r\n    warn(`Unexpected type of inputValue! Expected \"string\", \"number\" or \"Promise\", got \"${typeof inputValue}\"`);\r\n  }\r\n};\r\n\r\n/** @type {Record<SweetAlertInput, (input: Input | HTMLElement, params: SweetAlertOptions) => Input>} */\r\nconst renderInputType = {};\r\n\r\n/**\r\n * @param {HTMLInputElement} input\r\n * @param {SweetAlertOptions} params\r\n * @returns {HTMLInputElement}\r\n */\r\nrenderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = renderInputType.search = renderInputType.date = renderInputType['datetime-local'] = renderInputType.time = renderInputType.week = renderInputType.month = /** @type {(input: Input | HTMLElement, params: SweetAlertOptions) => Input} */\r\n(input, params) => {\r\n  checkAndSetInputValue(input, params.inputValue);\r\n  setInputLabel(input, input, params);\r\n  setInputPlaceholder(input, params);\r\n  input.type = params.input;\r\n  return input;\r\n};\r\n\r\n/**\r\n * @param {HTMLInputElement} input\r\n * @param {SweetAlertOptions} params\r\n * @returns {HTMLInputElement}\r\n */\r\nrenderInputType.file = (input, params) => {\r\n  setInputLabel(input, input, params);\r\n  setInputPlaceholder(input, params);\r\n  return input;\r\n};\r\n\r\n/**\r\n * @param {HTMLInputElement} range\r\n * @param {SweetAlertOptions} params\r\n * @returns {HTMLInputElement}\r\n */\r\nrenderInputType.range = (range, params) => {\r\n  const rangeInput = range.querySelector('input');\r\n  const rangeOutput = range.querySelector('output');\r\n  checkAndSetInputValue(rangeInput, params.inputValue);\r\n  rangeInput.type = params.input;\r\n  checkAndSetInputValue(rangeOutput, params.inputValue);\r\n  setInputLabel(rangeInput, range, params);\r\n  return range;\r\n};\r\n\r\n/**\r\n * @param {HTMLSelectElement} select\r\n * @param {SweetAlertOptions} params\r\n * @returns {HTMLSelectElement}\r\n */\r\nrenderInputType.select = (select, params) => {\r\n  select.textContent = '';\r\n  if (params.inputPlaceholder) {\r\n    const placeholder = document.createElement('option');\r\n    setInnerHtml(placeholder, params.inputPlaceholder);\r\n    placeholder.value = '';\r\n    placeholder.disabled = true;\r\n    placeholder.selected = true;\r\n    select.appendChild(placeholder);\r\n  }\r\n  setInputLabel(select, select, params);\r\n  return select;\r\n};\r\n\r\n/**\r\n * @param {HTMLInputElement} radio\r\n * @returns {HTMLInputElement}\r\n */\r\nrenderInputType.radio = radio => {\r\n  radio.textContent = '';\r\n  return radio;\r\n};\r\n\r\n/**\r\n * @param {HTMLLabelElement} checkboxContainer\r\n * @param {SweetAlertOptions} params\r\n * @returns {HTMLInputElement}\r\n */\r\nrenderInputType.checkbox = (checkboxContainer, params) => {\r\n  const checkbox = getInput$1(getPopup(), 'checkbox');\r\n  checkbox.value = '1';\r\n  checkbox.checked = Boolean(params.inputValue);\r\n  const label = checkboxContainer.querySelector('span');\r\n  setInnerHtml(label, params.inputPlaceholder || params.inputLabel);\r\n  return checkbox;\r\n};\r\n\r\n/**\r\n * @param {HTMLTextAreaElement} textarea\r\n * @param {SweetAlertOptions} params\r\n * @returns {HTMLTextAreaElement}\r\n */\r\nrenderInputType.textarea = (textarea, params) => {\r\n  checkAndSetInputValue(textarea, params.inputValue);\r\n  setInputPlaceholder(textarea, params);\r\n  setInputLabel(textarea, textarea, params);\r\n\r\n  /**\r\n   * @param {HTMLElement} el\r\n   * @returns {number}\r\n   */\r\n  const getMargin = el => parseInt(window.getComputedStyle(el).marginLeft) + parseInt(window.getComputedStyle(el).marginRight);\r\n\r\n  // https://github.com/sweetalert2/sweetalert2/issues/2291\r\n  setTimeout(() => {\r\n    // https://github.com/sweetalert2/sweetalert2/issues/1699\r\n    if ('MutationObserver' in window) {\r\n      const initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);\r\n      const textareaResizeHandler = () => {\r\n        // check if texarea is still in document (i.e. popup wasn't closed in the meantime)\r\n        if (!document.body.contains(textarea)) {\r\n          return;\r\n        }\r\n        const textareaWidth = textarea.offsetWidth + getMargin(textarea);\r\n        if (textareaWidth > initialPopupWidth) {\r\n          getPopup().style.width = `${textareaWidth}px`;\r\n        } else {\r\n          applyNumericalStyle(getPopup(), 'width', params.width);\r\n        }\r\n      };\r\n      new MutationObserver(textareaResizeHandler).observe(textarea, {\r\n        attributes: true,\r\n        attributeFilter: ['style']\r\n      });\r\n    }\r\n  });\r\n  return textarea;\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst renderContent = (instance, params) => {\r\n  const htmlContainer = getHtmlContainer();\r\n  if (!htmlContainer) {\r\n    return;\r\n  }\r\n  showWhenInnerHtmlPresent(htmlContainer);\r\n  applyCustomClass(htmlContainer, params, 'htmlContainer');\r\n\r\n  // Content as HTML\r\n  if (params.html) {\r\n    parseHtmlToContainer(params.html, htmlContainer);\r\n    show(htmlContainer, 'block');\r\n  }\r\n\r\n  // Content as plain text\r\n  else if (params.text) {\r\n    htmlContainer.textContent = params.text;\r\n    show(htmlContainer, 'block');\r\n  }\r\n\r\n  // No content\r\n  else {\r\n    hide(htmlContainer);\r\n  }\r\n  renderInput(instance, params);\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst renderFooter = (instance, params) => {\r\n  const footer = getFooter();\r\n  if (!footer) {\r\n    return;\r\n  }\r\n  showWhenInnerHtmlPresent(footer);\r\n  toggle(footer, params.footer, 'block');\r\n  if (params.footer) {\r\n    parseHtmlToContainer(params.footer, footer);\r\n  }\r\n\r\n  // Custom class\r\n  applyCustomClass(footer, params, 'footer');\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst renderIcon = (instance, params) => {\r\n  const innerParams = privateProps.innerParams.get(instance);\r\n  const icon = getIcon();\r\n  if (!icon) {\r\n    return;\r\n  }\r\n\r\n  // if the given icon already rendered, apply the styling without re-rendering the icon\r\n  if (innerParams && params.icon === innerParams.icon) {\r\n    // Custom or default content\r\n    setContent(icon, params);\r\n    applyStyles(icon, params);\r\n    return;\r\n  }\r\n  if (!params.icon && !params.iconHtml) {\r\n    hide(icon);\r\n    return;\r\n  }\r\n  if (params.icon && Object.keys(iconTypes).indexOf(params.icon) === -1) {\r\n    error(`Unknown icon! Expected \"success\", \"error\", \"warning\", \"info\" or \"question\", got \"${params.icon}\"`);\r\n    hide(icon);\r\n    return;\r\n  }\r\n  show(icon);\r\n\r\n  // Custom or default content\r\n  setContent(icon, params);\r\n  applyStyles(icon, params);\r\n\r\n  // Animate icon\r\n  addClass(icon, params.showClass && params.showClass.icon);\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} icon\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst applyStyles = (icon, params) => {\r\n  for (const [iconType, iconClassName] of Object.entries(iconTypes)) {\r\n    if (params.icon !== iconType) {\r\n      removeClass(icon, iconClassName);\r\n    }\r\n  }\r\n  addClass(icon, params.icon && iconTypes[params.icon]);\r\n\r\n  // Icon color\r\n  setColor(icon, params);\r\n\r\n  // Success icon background color\r\n  adjustSuccessIconBackgroundColor();\r\n\r\n  // Custom class\r\n  applyCustomClass(icon, params, 'icon');\r\n};\r\n\r\n// Adjust success icon background color to match the popup background color\r\nconst adjustSuccessIconBackgroundColor = () => {\r\n  const popup = getPopup();\r\n  if (!popup) {\r\n    return;\r\n  }\r\n  const popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');\r\n  /** @type {NodeListOf<HTMLElement>} */\r\n  const successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');\r\n  for (let i = 0; i < successIconParts.length; i++) {\r\n    successIconParts[i].style.backgroundColor = popupBackgroundColor;\r\n  }\r\n};\r\nconst successIconHtml = `\r\n  <div class=\"swal2-success-circular-line-left\"></div>\r\n  <span class=\"swal2-success-line-tip\"></span> <span class=\"swal2-success-line-long\"></span>\r\n  <div class=\"swal2-success-ring\"></div> <div class=\"swal2-success-fix\"></div>\r\n  <div class=\"swal2-success-circular-line-right\"></div>\r\n`;\r\nconst errorIconHtml = `\r\n  <span class=\"swal2-x-mark\">\r\n    <span class=\"swal2-x-mark-line-left\"></span>\r\n    <span class=\"swal2-x-mark-line-right\"></span>\r\n  </span>\r\n`;\r\n\r\n/**\r\n * @param {HTMLElement} icon\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst setContent = (icon, params) => {\r\n  if (!params.icon && !params.iconHtml) {\r\n    return;\r\n  }\r\n  let oldContent = icon.innerHTML;\r\n  let newContent = '';\r\n  if (params.iconHtml) {\r\n    newContent = iconContent(params.iconHtml);\r\n  } else if (params.icon === 'success') {\r\n    newContent = successIconHtml;\r\n    oldContent = oldContent.replace(/ style=\".*?\"/g, ''); // undo adjustSuccessIconBackgroundColor()\r\n  } else if (params.icon === 'error') {\r\n    newContent = errorIconHtml;\r\n  } else if (params.icon) {\r\n    const defaultIconHtml = {\r\n      question: '?',\r\n      warning: '!',\r\n      info: 'i'\r\n    };\r\n    newContent = iconContent(defaultIconHtml[params.icon]);\r\n  }\r\n  if (oldContent.trim() !== newContent.trim()) {\r\n    setInnerHtml(icon, newContent);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} icon\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst setColor = (icon, params) => {\r\n  if (!params.iconColor) {\r\n    return;\r\n  }\r\n  icon.style.color = params.iconColor;\r\n  icon.style.borderColor = params.iconColor;\r\n  for (const sel of ['.swal2-success-line-tip', '.swal2-success-line-long', '.swal2-x-mark-line-left', '.swal2-x-mark-line-right']) {\r\n    setStyle(icon, sel, 'background-color', params.iconColor);\r\n  }\r\n  setStyle(icon, '.swal2-success-ring', 'border-color', params.iconColor);\r\n};\r\n\r\n/**\r\n * @param {string} content\r\n * @returns {string}\r\n */\r\nconst iconContent = content => `<div class=\"${swalClasses['icon-content']}\">${content}</div>`;\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst renderImage = (instance, params) => {\r\n  const image = getImage();\r\n  if (!image) {\r\n    return;\r\n  }\r\n  if (!params.imageUrl) {\r\n    hide(image);\r\n    return;\r\n  }\r\n  show(image, '');\r\n\r\n  // Src, alt\r\n  image.setAttribute('src', params.imageUrl);\r\n  image.setAttribute('alt', params.imageAlt || '');\r\n\r\n  // Width, height\r\n  applyNumericalStyle(image, 'width', params.imageWidth);\r\n  applyNumericalStyle(image, 'height', params.imageHeight);\r\n\r\n  // Class\r\n  image.className = swalClasses.image;\r\n  applyCustomClass(image, params, 'image');\r\n};\r\n\r\nlet dragging = false;\r\nlet mousedownX = 0;\r\nlet mousedownY = 0;\r\nlet initialX = 0;\r\nlet initialY = 0;\r\n\r\n/**\r\n * @param {HTMLElement} popup\r\n */\r\nconst addDraggableListeners = popup => {\r\n  popup.addEventListener('mousedown', down);\r\n  document.body.addEventListener('mousemove', move);\r\n  popup.addEventListener('mouseup', up);\r\n  popup.addEventListener('touchstart', down);\r\n  document.body.addEventListener('touchmove', move);\r\n  popup.addEventListener('touchend', up);\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} popup\r\n */\r\nconst removeDraggableListeners = popup => {\r\n  popup.removeEventListener('mousedown', down);\r\n  document.body.removeEventListener('mousemove', move);\r\n  popup.removeEventListener('mouseup', up);\r\n  popup.removeEventListener('touchstart', down);\r\n  document.body.removeEventListener('touchmove', move);\r\n  popup.removeEventListener('touchend', up);\r\n};\r\n\r\n/**\r\n * @param {MouseEvent | TouchEvent} event\r\n */\r\nconst down = event => {\r\n  const popup = getPopup();\r\n  if (event.target === popup || getIcon().contains(/** @type {HTMLElement} */event.target)) {\r\n    dragging = true;\r\n    const clientXY = getClientXY(event);\r\n    mousedownX = clientXY.clientX;\r\n    mousedownY = clientXY.clientY;\r\n    initialX = parseInt(popup.style.insetInlineStart) || 0;\r\n    initialY = parseInt(popup.style.insetBlockStart) || 0;\r\n    addClass(popup, 'swal2-dragging');\r\n  }\r\n};\r\n\r\n/**\r\n * @param {MouseEvent | TouchEvent} event\r\n */\r\nconst move = event => {\r\n  const popup = getPopup();\r\n  if (dragging) {\r\n    let {\r\n      clientX,\r\n      clientY\r\n    } = getClientXY(event);\r\n    popup.style.insetInlineStart = `${initialX + (clientX - mousedownX)}px`;\r\n    popup.style.insetBlockStart = `${initialY + (clientY - mousedownY)}px`;\r\n  }\r\n};\r\nconst up = () => {\r\n  const popup = getPopup();\r\n  dragging = false;\r\n  removeClass(popup, 'swal2-dragging');\r\n};\r\n\r\n/**\r\n * @param {MouseEvent | TouchEvent} event\r\n * @returns {{ clientX: number, clientY: number }}\r\n */\r\nconst getClientXY = event => {\r\n  let clientX = 0,\r\n    clientY = 0;\r\n  if (event.type.startsWith('mouse')) {\r\n    clientX = /** @type {MouseEvent} */event.clientX;\r\n    clientY = /** @type {MouseEvent} */event.clientY;\r\n  } else if (event.type.startsWith('touch')) {\r\n    clientX = /** @type {TouchEvent} */event.touches[0].clientX;\r\n    clientY = /** @type {TouchEvent} */event.touches[0].clientY;\r\n  }\r\n  return {\r\n    clientX,\r\n    clientY\r\n  };\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst renderPopup = (instance, params) => {\r\n  const container = getContainer();\r\n  const popup = getPopup();\r\n  if (!container || !popup) {\r\n    return;\r\n  }\r\n\r\n  // Width\r\n  // https://github.com/sweetalert2/sweetalert2/issues/2170\r\n  if (params.toast) {\r\n    applyNumericalStyle(container, 'width', params.width);\r\n    popup.style.width = '100%';\r\n    const loader = getLoader();\r\n    if (loader) {\r\n      popup.insertBefore(loader, getIcon());\r\n    }\r\n  } else {\r\n    applyNumericalStyle(popup, 'width', params.width);\r\n  }\r\n\r\n  // Padding\r\n  applyNumericalStyle(popup, 'padding', params.padding);\r\n\r\n  // Color\r\n  if (params.color) {\r\n    popup.style.color = params.color;\r\n  }\r\n\r\n  // Background\r\n  if (params.background) {\r\n    popup.style.background = params.background;\r\n  }\r\n  hide(getValidationMessage());\r\n\r\n  // Classes\r\n  addClasses$1(popup, params);\r\n  if (params.draggable && !params.toast) {\r\n    addClass(popup, swalClasses.draggable);\r\n    addDraggableListeners(popup);\r\n  } else {\r\n    removeClass(popup, swalClasses.draggable);\r\n    removeDraggableListeners(popup);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} popup\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst addClasses$1 = (popup, params) => {\r\n  const showClass = params.showClass || {};\r\n  // Default Class + showClass when updating Swal.update({})\r\n  popup.className = `${swalClasses.popup} ${isVisible$1(popup) ? showClass.popup : ''}`;\r\n  if (params.toast) {\r\n    addClass([document.documentElement, document.body], swalClasses['toast-shown']);\r\n    addClass(popup, swalClasses.toast);\r\n  } else {\r\n    addClass(popup, swalClasses.modal);\r\n  }\r\n\r\n  // Custom class\r\n  applyCustomClass(popup, params, 'popup');\r\n  // TODO: remove in the next major\r\n  if (typeof params.customClass === 'string') {\r\n    addClass(popup, params.customClass);\r\n  }\r\n\r\n  // Icon class (#1842)\r\n  if (params.icon) {\r\n    addClass(popup, swalClasses[`icon-${params.icon}`]);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst renderProgressSteps = (instance, params) => {\r\n  const progressStepsContainer = getProgressSteps();\r\n  if (!progressStepsContainer) {\r\n    return;\r\n  }\r\n  const {\r\n    progressSteps,\r\n    currentProgressStep\r\n  } = params;\r\n  if (!progressSteps || progressSteps.length === 0 || currentProgressStep === undefined) {\r\n    hide(progressStepsContainer);\r\n    return;\r\n  }\r\n  show(progressStepsContainer);\r\n  progressStepsContainer.textContent = '';\r\n  if (currentProgressStep >= progressSteps.length) {\r\n    warn('Invalid currentProgressStep parameter, it should be less than progressSteps.length ' + '(currentProgressStep like JS arrays starts from 0)');\r\n  }\r\n  progressSteps.forEach((step, index) => {\r\n    const stepEl = createStepElement(step);\r\n    progressStepsContainer.appendChild(stepEl);\r\n    if (index === currentProgressStep) {\r\n      addClass(stepEl, swalClasses['active-progress-step']);\r\n    }\r\n    if (index !== progressSteps.length - 1) {\r\n      const lineEl = createLineElement(params);\r\n      progressStepsContainer.appendChild(lineEl);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * @param {string} step\r\n * @returns {HTMLLIElement}\r\n */\r\nconst createStepElement = step => {\r\n  const stepEl = document.createElement('li');\r\n  addClass(stepEl, swalClasses['progress-step']);\r\n  setInnerHtml(stepEl, step);\r\n  return stepEl;\r\n};\r\n\r\n/**\r\n * @param {SweetAlertOptions} params\r\n * @returns {HTMLLIElement}\r\n */\r\nconst createLineElement = params => {\r\n  const lineEl = document.createElement('li');\r\n  addClass(lineEl, swalClasses['progress-step-line']);\r\n  if (params.progressStepsDistance) {\r\n    applyNumericalStyle(lineEl, 'width', params.progressStepsDistance);\r\n  }\r\n  return lineEl;\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst renderTitle = (instance, params) => {\r\n  const title = getTitle();\r\n  if (!title) {\r\n    return;\r\n  }\r\n  showWhenInnerHtmlPresent(title);\r\n  toggle(title, params.title || params.titleText, 'block');\r\n  if (params.title) {\r\n    parseHtmlToContainer(params.title, title);\r\n  }\r\n  if (params.titleText) {\r\n    title.innerText = params.titleText;\r\n  }\r\n\r\n  // Custom class\r\n  applyCustomClass(title, params, 'title');\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst render = (instance, params) => {\r\n  renderPopup(instance, params);\r\n  renderContainer(instance, params);\r\n  renderProgressSteps(instance, params);\r\n  renderIcon(instance, params);\r\n  renderImage(instance, params);\r\n  renderTitle(instance, params);\r\n  renderCloseButton(instance, params);\r\n  renderContent(instance, params);\r\n  renderActions(instance, params);\r\n  renderFooter(instance, params);\r\n  const popup = getPopup();\r\n  if (typeof params.didRender === 'function' && popup) {\r\n    params.didRender(popup);\r\n  }\r\n  globalState.eventEmitter.emit('didRender', popup);\r\n};\r\n\r\n/*\r\n * Global function to determine if SweetAlert2 popup is shown\r\n */\r\nconst isVisible = () => {\r\n  return isVisible$1(getPopup());\r\n};\r\n\r\n/*\r\n * Global function to click 'Confirm' button\r\n */\r\nconst clickConfirm = () => {\r\n  var _dom$getConfirmButton;\r\n  return (_dom$getConfirmButton = getConfirmButton()) === null || _dom$getConfirmButton === void 0 ? void 0 : _dom$getConfirmButton.click();\r\n};\r\n\r\n/*\r\n * Global function to click 'Deny' button\r\n */\r\nconst clickDeny = () => {\r\n  var _dom$getDenyButton;\r\n  return (_dom$getDenyButton = getDenyButton()) === null || _dom$getDenyButton === void 0 ? void 0 : _dom$getDenyButton.click();\r\n};\r\n\r\n/*\r\n * Global function to click 'Cancel' button\r\n */\r\nconst clickCancel = () => {\r\n  var _dom$getCancelButton;\r\n  return (_dom$getCancelButton = getCancelButton()) === null || _dom$getCancelButton === void 0 ? void 0 : _dom$getCancelButton.click();\r\n};\r\n\r\n/** @typedef {'cancel' | 'backdrop' | 'close' | 'esc' | 'timer'} DismissReason */\r\n\r\n/** @type {Record<DismissReason, DismissReason>} */\r\nconst DismissReason = Object.freeze({\r\n  cancel: 'cancel',\r\n  backdrop: 'backdrop',\r\n  close: 'close',\r\n  esc: 'esc',\r\n  timer: 'timer'\r\n});\r\n\r\n/**\r\n * @param {GlobalState} globalState\r\n */\r\nconst removeKeydownHandler = globalState => {\r\n  if (globalState.keydownTarget && globalState.keydownHandlerAdded) {\r\n    globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {\r\n      capture: globalState.keydownListenerCapture\r\n    });\r\n    globalState.keydownHandlerAdded = false;\r\n  }\r\n};\r\n\r\n/**\r\n * @param {GlobalState} globalState\r\n * @param {SweetAlertOptions} innerParams\r\n * @param {*} dismissWith\r\n */\r\nconst addKeydownHandler = (globalState, innerParams, dismissWith) => {\r\n  removeKeydownHandler(globalState);\r\n  if (!innerParams.toast) {\r\n    globalState.keydownHandler = e => keydownHandler(innerParams, e, dismissWith);\r\n    globalState.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();\r\n    globalState.keydownListenerCapture = innerParams.keydownListenerCapture;\r\n    globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, {\r\n      capture: globalState.keydownListenerCapture\r\n    });\r\n    globalState.keydownHandlerAdded = true;\r\n  }\r\n};\r\n\r\n/**\r\n * @param {number} index\r\n * @param {number} increment\r\n */\r\nconst setFocus = (index, increment) => {\r\n  var _dom$getPopup;\r\n  const focusableElements = getFocusableElements();\r\n  // search for visible elements and select the next possible match\r\n  if (focusableElements.length) {\r\n    index = index + increment;\r\n\r\n    // rollover to first item\r\n    if (index === focusableElements.length) {\r\n      index = 0;\r\n\r\n      // go to last item\r\n    } else if (index === -1) {\r\n      index = focusableElements.length - 1;\r\n    }\r\n    focusableElements[index].focus();\r\n    return;\r\n  }\r\n  // no visible focusable elements, focus the popup\r\n  (_dom$getPopup = getPopup()) === null || _dom$getPopup === void 0 || _dom$getPopup.focus();\r\n};\r\nconst arrowKeysNextButton = ['ArrowRight', 'ArrowDown'];\r\nconst arrowKeysPreviousButton = ['ArrowLeft', 'ArrowUp'];\r\n\r\n/**\r\n * @param {SweetAlertOptions} innerParams\r\n * @param {KeyboardEvent} event\r\n * @param {Function} dismissWith\r\n */\r\nconst keydownHandler = (innerParams, event, dismissWith) => {\r\n  if (!innerParams) {\r\n    return; // This instance has already been destroyed\r\n  }\r\n\r\n  // Ignore keydown during IME composition\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/Document/keydown_event#ignoring_keydown_during_ime_composition\r\n  // https://github.com/sweetalert2/sweetalert2/issues/720\r\n  // https://github.com/sweetalert2/sweetalert2/issues/2406\r\n  if (event.isComposing || event.keyCode === 229) {\r\n    return;\r\n  }\r\n  if (innerParams.stopKeydownPropagation) {\r\n    event.stopPropagation();\r\n  }\r\n\r\n  // ENTER\r\n  if (event.key === 'Enter') {\r\n    handleEnter(event, innerParams);\r\n  }\r\n\r\n  // TAB\r\n  else if (event.key === 'Tab') {\r\n    handleTab(event);\r\n  }\r\n\r\n  // ARROWS - switch focus between buttons\r\n  else if ([...arrowKeysNextButton, ...arrowKeysPreviousButton].includes(event.key)) {\r\n    handleArrows(event.key);\r\n  }\r\n\r\n  // ESC\r\n  else if (event.key === 'Escape') {\r\n    handleEsc(event, innerParams, dismissWith);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {KeyboardEvent} event\r\n * @param {SweetAlertOptions} innerParams\r\n */\r\nconst handleEnter = (event, innerParams) => {\r\n  // https://github.com/sweetalert2/sweetalert2/issues/2386\r\n  if (!callIfFunction(innerParams.allowEnterKey)) {\r\n    return;\r\n  }\r\n  const input = getInput$1(getPopup(), innerParams.input);\r\n  if (event.target && input && event.target instanceof HTMLElement && event.target.outerHTML === input.outerHTML) {\r\n    if (['textarea', 'file'].includes(innerParams.input)) {\r\n      return; // do not submit\r\n    }\r\n    clickConfirm();\r\n    event.preventDefault();\r\n  }\r\n};\r\n\r\n/**\r\n * @param {KeyboardEvent} event\r\n */\r\nconst handleTab = event => {\r\n  const targetElement = event.target;\r\n  const focusableElements = getFocusableElements();\r\n  let btnIndex = -1;\r\n  for (let i = 0; i < focusableElements.length; i++) {\r\n    if (targetElement === focusableElements[i]) {\r\n      btnIndex = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Cycle to the next button\r\n  if (!event.shiftKey) {\r\n    setFocus(btnIndex, 1);\r\n  }\r\n\r\n  // Cycle to the prev button\r\n  else {\r\n    setFocus(btnIndex, -1);\r\n  }\r\n  event.stopPropagation();\r\n  event.preventDefault();\r\n};\r\n\r\n/**\r\n * @param {string} key\r\n */\r\nconst handleArrows = key => {\r\n  const actions = getActions();\r\n  const confirmButton = getConfirmButton();\r\n  const denyButton = getDenyButton();\r\n  const cancelButton = getCancelButton();\r\n  if (!actions || !confirmButton || !denyButton || !cancelButton) {\r\n    return;\r\n  }\r\n  /** @type HTMLElement[] */\r\n  const buttons = [confirmButton, denyButton, cancelButton];\r\n  if (document.activeElement instanceof HTMLElement && !buttons.includes(document.activeElement)) {\r\n    return;\r\n  }\r\n  const sibling = arrowKeysNextButton.includes(key) ? 'nextElementSibling' : 'previousElementSibling';\r\n  let buttonToFocus = document.activeElement;\r\n  if (!buttonToFocus) {\r\n    return;\r\n  }\r\n  for (let i = 0; i < actions.children.length; i++) {\r\n    buttonToFocus = buttonToFocus[sibling];\r\n    if (!buttonToFocus) {\r\n      return;\r\n    }\r\n    if (buttonToFocus instanceof HTMLButtonElement && isVisible$1(buttonToFocus)) {\r\n      break;\r\n    }\r\n  }\r\n  if (buttonToFocus instanceof HTMLButtonElement) {\r\n    buttonToFocus.focus();\r\n  }\r\n};\r\n\r\n/**\r\n * @param {KeyboardEvent} event\r\n * @param {SweetAlertOptions} innerParams\r\n * @param {Function} dismissWith\r\n */\r\nconst handleEsc = (event, innerParams, dismissWith) => {\r\n  if (callIfFunction(innerParams.allowEscapeKey)) {\r\n    event.preventDefault();\r\n    dismissWith(DismissReason.esc);\r\n  }\r\n};\r\n\r\n/**\r\n * This module contains `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\r\n * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\r\n * This is the approach that Babel will probably take to implement private methods/fields\r\n *   https://github.com/tc39/proposal-private-methods\r\n *   https://github.com/babel/babel/pull/7555\r\n * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\r\n *   then we can use that language feature.\r\n */\r\n\r\nvar privateMethods = {\r\n  swalPromiseResolve: new WeakMap(),\r\n  swalPromiseReject: new WeakMap()\r\n};\r\n\r\n// From https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\r\n// Adding aria-hidden=\"true\" to elements outside of the active modal dialog ensures that\r\n// elements not within the active modal dialog will not be surfaced if a user opens a screen\r\n// reader’s list of elements (headings, form controls, landmarks, etc.) in the document.\r\n\r\nconst setAriaHidden = () => {\r\n  const container = getContainer();\r\n  const bodyChildren = Array.from(document.body.children);\r\n  bodyChildren.forEach(el => {\r\n    if (el.contains(container)) {\r\n      return;\r\n    }\r\n    if (el.hasAttribute('aria-hidden')) {\r\n      el.setAttribute('data-previous-aria-hidden', el.getAttribute('aria-hidden') || '');\r\n    }\r\n    el.setAttribute('aria-hidden', 'true');\r\n  });\r\n};\r\nconst unsetAriaHidden = () => {\r\n  const bodyChildren = Array.from(document.body.children);\r\n  bodyChildren.forEach(el => {\r\n    if (el.hasAttribute('data-previous-aria-hidden')) {\r\n      el.setAttribute('aria-hidden', el.getAttribute('data-previous-aria-hidden') || '');\r\n      el.removeAttribute('data-previous-aria-hidden');\r\n    } else {\r\n      el.removeAttribute('aria-hidden');\r\n    }\r\n  });\r\n};\r\n\r\n// @ts-ignore\r\nconst isSafariOrIOS = typeof window !== 'undefined' && !!window.GestureEvent; // true for Safari desktop + all iOS browsers https://stackoverflow.com/a/70585394\r\n\r\n/**\r\n * Fix iOS scrolling\r\n * http://stackoverflow.com/q/39626302\r\n */\r\nconst iOSfix = () => {\r\n  if (isSafariOrIOS && !hasClass(document.body, swalClasses.iosfix)) {\r\n    const offset = document.body.scrollTop;\r\n    document.body.style.top = `${offset * -1}px`;\r\n    addClass(document.body, swalClasses.iosfix);\r\n    lockBodyScroll();\r\n  }\r\n};\r\n\r\n/**\r\n * https://github.com/sweetalert2/sweetalert2/issues/1246\r\n */\r\nconst lockBodyScroll = () => {\r\n  const container = getContainer();\r\n  if (!container) {\r\n    return;\r\n  }\r\n  /** @type {boolean} */\r\n  let preventTouchMove;\r\n  /**\r\n   * @param {TouchEvent} event\r\n   */\r\n  container.ontouchstart = event => {\r\n    preventTouchMove = shouldPreventTouchMove(event);\r\n  };\r\n  /**\r\n   * @param {TouchEvent} event\r\n   */\r\n  container.ontouchmove = event => {\r\n    if (preventTouchMove) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * @param {TouchEvent} event\r\n * @returns {boolean}\r\n */\r\nconst shouldPreventTouchMove = event => {\r\n  const target = event.target;\r\n  const container = getContainer();\r\n  const htmlContainer = getHtmlContainer();\r\n  if (!container || !htmlContainer) {\r\n    return false;\r\n  }\r\n  if (isStylus(event) || isZoom(event)) {\r\n    return false;\r\n  }\r\n  if (target === container) {\r\n    return true;\r\n  }\r\n  if (!isScrollable(container) && target instanceof HTMLElement && target.tagName !== 'INPUT' &&\r\n  // #1603\r\n  target.tagName !== 'TEXTAREA' &&\r\n  // #2266\r\n  !(isScrollable(htmlContainer) &&\r\n  // #1944\r\n  htmlContainer.contains(target))) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * https://github.com/sweetalert2/sweetalert2/issues/1786\r\n *\r\n * @param {*} event\r\n * @returns {boolean}\r\n */\r\nconst isStylus = event => {\r\n  return event.touches && event.touches.length && event.touches[0].touchType === 'stylus';\r\n};\r\n\r\n/**\r\n * https://github.com/sweetalert2/sweetalert2/issues/1891\r\n *\r\n * @param {TouchEvent} event\r\n * @returns {boolean}\r\n */\r\nconst isZoom = event => {\r\n  return event.touches && event.touches.length > 1;\r\n};\r\nconst undoIOSfix = () => {\r\n  if (hasClass(document.body, swalClasses.iosfix)) {\r\n    const offset = parseInt(document.body.style.top, 10);\r\n    removeClass(document.body, swalClasses.iosfix);\r\n    document.body.style.top = '';\r\n    document.body.scrollTop = offset * -1;\r\n  }\r\n};\r\n\r\n/**\r\n * Measure scrollbar width for padding body during modal show/hide\r\n * https://github.com/twbs/bootstrap/blob/master/js/src/modal.js\r\n *\r\n * @returns {number}\r\n */\r\nconst measureScrollbar = () => {\r\n  const scrollDiv = document.createElement('div');\r\n  scrollDiv.className = swalClasses['scrollbar-measure'];\r\n  document.body.appendChild(scrollDiv);\r\n  const scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;\r\n  document.body.removeChild(scrollDiv);\r\n  return scrollbarWidth;\r\n};\r\n\r\n/**\r\n * Remember state in cases where opening and handling a modal will fiddle with it.\r\n * @type {number | null}\r\n */\r\nlet previousBodyPadding = null;\r\n\r\n/**\r\n * @param {string} initialBodyOverflow\r\n */\r\nconst replaceScrollbarWithPadding = initialBodyOverflow => {\r\n  // for queues, do not do this more than once\r\n  if (previousBodyPadding !== null) {\r\n    return;\r\n  }\r\n  // if the body has overflow\r\n  if (document.body.scrollHeight > window.innerHeight || initialBodyOverflow === 'scroll' // https://github.com/sweetalert2/sweetalert2/issues/2663\r\n  ) {\r\n    // add padding so the content doesn't shift after removal of scrollbar\r\n    previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right'));\r\n    document.body.style.paddingRight = `${previousBodyPadding + measureScrollbar()}px`;\r\n  }\r\n};\r\nconst undoReplaceScrollbarWithPadding = () => {\r\n  if (previousBodyPadding !== null) {\r\n    document.body.style.paddingRight = `${previousBodyPadding}px`;\r\n    previousBodyPadding = null;\r\n  }\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {HTMLElement} container\r\n * @param {boolean} returnFocus\r\n * @param {Function} didClose\r\n */\r\nfunction removePopupAndResetState(instance, container, returnFocus, didClose) {\r\n  if (isToast()) {\r\n    triggerDidCloseAndDispose(instance, didClose);\r\n  } else {\r\n    restoreActiveElement(returnFocus).then(() => triggerDidCloseAndDispose(instance, didClose));\r\n    removeKeydownHandler(globalState);\r\n  }\r\n\r\n  // workaround for https://github.com/sweetalert2/sweetalert2/issues/2088\r\n  // for some reason removing the container in Safari will scroll the document to bottom\r\n  if (isSafariOrIOS) {\r\n    container.setAttribute('style', 'display:none !important');\r\n    container.removeAttribute('class');\r\n    container.innerHTML = '';\r\n  } else {\r\n    container.remove();\r\n  }\r\n  if (isModal()) {\r\n    undoReplaceScrollbarWithPadding();\r\n    undoIOSfix();\r\n    unsetAriaHidden();\r\n  }\r\n  removeBodyClasses();\r\n}\r\n\r\n/**\r\n * Remove SweetAlert2 classes from body\r\n */\r\nfunction removeBodyClasses() {\r\n  removeClass([document.documentElement, document.body], [swalClasses.shown, swalClasses['height-auto'], swalClasses['no-backdrop'], swalClasses['toast-shown']]);\r\n}\r\n\r\n/**\r\n * Instance method to close sweetAlert\r\n *\r\n * @param {any} resolveValue\r\n */\r\nfunction close(resolveValue) {\r\n  resolveValue = prepareResolveValue(resolveValue);\r\n  const swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);\r\n  const didClose = triggerClosePopup(this);\r\n  if (this.isAwaitingPromise) {\r\n    // A swal awaiting for a promise (after a click on Confirm or Deny) cannot be dismissed anymore #2335\r\n    if (!resolveValue.isDismissed) {\r\n      handleAwaitingPromise(this);\r\n      swalPromiseResolve(resolveValue);\r\n    }\r\n  } else if (didClose) {\r\n    // Resolve Swal promise\r\n    swalPromiseResolve(resolveValue);\r\n  }\r\n}\r\nconst triggerClosePopup = instance => {\r\n  const popup = getPopup();\r\n  if (!popup) {\r\n    return false;\r\n  }\r\n  const innerParams = privateProps.innerParams.get(instance);\r\n  if (!innerParams || hasClass(popup, innerParams.hideClass.popup)) {\r\n    return false;\r\n  }\r\n  removeClass(popup, innerParams.showClass.popup);\r\n  addClass(popup, innerParams.hideClass.popup);\r\n  const backdrop = getContainer();\r\n  removeClass(backdrop, innerParams.showClass.backdrop);\r\n  addClass(backdrop, innerParams.hideClass.backdrop);\r\n  handlePopupAnimation(instance, popup, innerParams);\r\n  return true;\r\n};\r\n\r\n/**\r\n * @param {any} error\r\n */\r\nfunction rejectPromise(error) {\r\n  const rejectPromise = privateMethods.swalPromiseReject.get(this);\r\n  handleAwaitingPromise(this);\r\n  if (rejectPromise) {\r\n    // Reject Swal promise\r\n    rejectPromise(error);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n */\r\nconst handleAwaitingPromise = instance => {\r\n  if (instance.isAwaitingPromise) {\r\n    delete instance.isAwaitingPromise;\r\n    // The instance might have been previously partly destroyed, we must resume the destroy process in this case #2335\r\n    if (!privateProps.innerParams.get(instance)) {\r\n      instance._destroy();\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * @param {any} resolveValue\r\n * @returns {SweetAlertResult}\r\n */\r\nconst prepareResolveValue = resolveValue => {\r\n  // When user calls Swal.close()\r\n  if (typeof resolveValue === 'undefined') {\r\n    return {\r\n      isConfirmed: false,\r\n      isDenied: false,\r\n      isDismissed: true\r\n    };\r\n  }\r\n  return Object.assign({\r\n    isConfirmed: false,\r\n    isDenied: false,\r\n    isDismissed: false\r\n  }, resolveValue);\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {HTMLElement} popup\r\n * @param {SweetAlertOptions} innerParams\r\n */\r\nconst handlePopupAnimation = (instance, popup, innerParams) => {\r\n  var _globalState$eventEmi;\r\n  const container = getContainer();\r\n  // If animation is supported, animate\r\n  const animationIsSupported = hasCssAnimation(popup);\r\n  if (typeof innerParams.willClose === 'function') {\r\n    innerParams.willClose(popup);\r\n  }\r\n  (_globalState$eventEmi = globalState.eventEmitter) === null || _globalState$eventEmi === void 0 || _globalState$eventEmi.emit('willClose', popup);\r\n  if (animationIsSupported) {\r\n    animatePopup(instance, popup, container, innerParams.returnFocus, innerParams.didClose);\r\n  } else {\r\n    // Otherwise, remove immediately\r\n    removePopupAndResetState(instance, container, innerParams.returnFocus, innerParams.didClose);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {HTMLElement} popup\r\n * @param {HTMLElement} container\r\n * @param {boolean} returnFocus\r\n * @param {Function} didClose\r\n */\r\nconst animatePopup = (instance, popup, container, returnFocus, didClose) => {\r\n  globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, returnFocus, didClose);\r\n  /**\r\n   * @param {AnimationEvent | TransitionEvent} e\r\n   */\r\n  const swalCloseAnimationFinished = function (e) {\r\n    if (e.target === popup) {\r\n      var _globalState$swalClos;\r\n      (_globalState$swalClos = globalState.swalCloseEventFinishedCallback) === null || _globalState$swalClos === void 0 || _globalState$swalClos.call(globalState);\r\n      delete globalState.swalCloseEventFinishedCallback;\r\n      popup.removeEventListener('animationend', swalCloseAnimationFinished);\r\n      popup.removeEventListener('transitionend', swalCloseAnimationFinished);\r\n    }\r\n  };\r\n  popup.addEventListener('animationend', swalCloseAnimationFinished);\r\n  popup.addEventListener('transitionend', swalCloseAnimationFinished);\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {Function} didClose\r\n */\r\nconst triggerDidCloseAndDispose = (instance, didClose) => {\r\n  setTimeout(() => {\r\n    var _globalState$eventEmi2;\r\n    if (typeof didClose === 'function') {\r\n      didClose.bind(instance.params)();\r\n    }\r\n    (_globalState$eventEmi2 = globalState.eventEmitter) === null || _globalState$eventEmi2 === void 0 || _globalState$eventEmi2.emit('didClose');\r\n    // instance might have been destroyed already\r\n    if (instance._destroy) {\r\n      instance._destroy();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Shows loader (spinner), this is useful with AJAX requests.\r\n * By default the loader be shown instead of the \"Confirm\" button.\r\n *\r\n * @param {HTMLButtonElement | null} [buttonToReplace]\r\n */\r\nconst showLoading = buttonToReplace => {\r\n  let popup = getPopup();\r\n  if (!popup) {\r\n    new Swal();\r\n  }\r\n  popup = getPopup();\r\n  if (!popup) {\r\n    return;\r\n  }\r\n  const loader = getLoader();\r\n  if (isToast()) {\r\n    hide(getIcon());\r\n  } else {\r\n    replaceButton(popup, buttonToReplace);\r\n  }\r\n  show(loader);\r\n  popup.setAttribute('data-loading', 'true');\r\n  popup.setAttribute('aria-busy', 'true');\r\n  popup.focus();\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} popup\r\n * @param {HTMLButtonElement | null} [buttonToReplace]\r\n */\r\nconst replaceButton = (popup, buttonToReplace) => {\r\n  const actions = getActions();\r\n  const loader = getLoader();\r\n  if (!actions || !loader) {\r\n    return;\r\n  }\r\n  if (!buttonToReplace && isVisible$1(getConfirmButton())) {\r\n    buttonToReplace = getConfirmButton();\r\n  }\r\n  show(actions);\r\n  if (buttonToReplace) {\r\n    hide(buttonToReplace);\r\n    loader.setAttribute('data-button-to-replace', buttonToReplace.className);\r\n    actions.insertBefore(loader, buttonToReplace);\r\n  }\r\n  addClass([popup, actions], swalClasses.loading);\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst handleInputOptionsAndValue = (instance, params) => {\r\n  if (params.input === 'select' || params.input === 'radio') {\r\n    handleInputOptions(instance, params);\r\n  } else if (['text', 'email', 'number', 'tel', 'textarea'].some(i => i === params.input) && (hasToPromiseFn(params.inputValue) || isPromise(params.inputValue))) {\r\n    showLoading(getConfirmButton());\r\n    handleInputValue(instance, params);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} innerParams\r\n * @returns {SweetAlertInputValue}\r\n */\r\nconst getInputValue = (instance, innerParams) => {\r\n  const input = instance.getInput();\r\n  if (!input) {\r\n    return null;\r\n  }\r\n  switch (innerParams.input) {\r\n    case 'checkbox':\r\n      return getCheckboxValue(input);\r\n    case 'radio':\r\n      return getRadioValue(input);\r\n    case 'file':\r\n      return getFileValue(input);\r\n    default:\r\n      return innerParams.inputAutoTrim ? input.value.trim() : input.value;\r\n  }\r\n};\r\n\r\n/**\r\n * @param {HTMLInputElement} input\r\n * @returns {number}\r\n */\r\nconst getCheckboxValue = input => input.checked ? 1 : 0;\r\n\r\n/**\r\n * @param {HTMLInputElement} input\r\n * @returns {string | null}\r\n */\r\nconst getRadioValue = input => input.checked ? input.value : null;\r\n\r\n/**\r\n * @param {HTMLInputElement} input\r\n * @returns {FileList | File | null}\r\n */\r\nconst getFileValue = input => input.files && input.files.length ? input.getAttribute('multiple') !== null ? input.files : input.files[0] : null;\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst handleInputOptions = (instance, params) => {\r\n  const popup = getPopup();\r\n  if (!popup) {\r\n    return;\r\n  }\r\n  /**\r\n   * @param {Record<string, any>} inputOptions\r\n   */\r\n  const processInputOptions = inputOptions => {\r\n    if (params.input === 'select') {\r\n      populateSelectOptions(popup, formatInputOptions(inputOptions), params);\r\n    } else if (params.input === 'radio') {\r\n      populateRadioOptions(popup, formatInputOptions(inputOptions), params);\r\n    }\r\n  };\r\n  if (hasToPromiseFn(params.inputOptions) || isPromise(params.inputOptions)) {\r\n    showLoading(getConfirmButton());\r\n    asPromise(params.inputOptions).then(inputOptions => {\r\n      instance.hideLoading();\r\n      processInputOptions(inputOptions);\r\n    });\r\n  } else if (typeof params.inputOptions === 'object') {\r\n    processInputOptions(params.inputOptions);\r\n  } else {\r\n    error(`Unexpected type of inputOptions! Expected object, Map or Promise, got ${typeof params.inputOptions}`);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst handleInputValue = (instance, params) => {\r\n  const input = instance.getInput();\r\n  if (!input) {\r\n    return;\r\n  }\r\n  hide(input);\r\n  asPromise(params.inputValue).then(inputValue => {\r\n    input.value = params.input === 'number' ? `${parseFloat(inputValue) || 0}` : `${inputValue}`;\r\n    show(input);\r\n    input.focus();\r\n    instance.hideLoading();\r\n  }).catch(err => {\r\n    error(`Error in inputValue promise: ${err}`);\r\n    input.value = '';\r\n    show(input);\r\n    input.focus();\r\n    instance.hideLoading();\r\n  });\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} popup\r\n * @param {InputOptionFlattened[]} inputOptions\r\n * @param {SweetAlertOptions} params\r\n */\r\nfunction populateSelectOptions(popup, inputOptions, params) {\r\n  const select = getDirectChildByClass(popup, swalClasses.select);\r\n  if (!select) {\r\n    return;\r\n  }\r\n  /**\r\n   * @param {HTMLElement} parent\r\n   * @param {string} optionLabel\r\n   * @param {string} optionValue\r\n   */\r\n  const renderOption = (parent, optionLabel, optionValue) => {\r\n    const option = document.createElement('option');\r\n    option.value = optionValue;\r\n    setInnerHtml(option, optionLabel);\r\n    option.selected = isSelected(optionValue, params.inputValue);\r\n    parent.appendChild(option);\r\n  };\r\n  inputOptions.forEach(inputOption => {\r\n    const optionValue = inputOption[0];\r\n    const optionLabel = inputOption[1];\r\n    // <optgroup> spec:\r\n    // https://www.w3.org/TR/html401/interact/forms.html#h-17.6\r\n    // \"...all OPTGROUP elements must be specified directly within a SELECT element (i.e., groups may not be nested)...\"\r\n    // check whether this is a <optgroup>\r\n    if (Array.isArray(optionLabel)) {\r\n      // if it is an array, then it is an <optgroup>\r\n      const optgroup = document.createElement('optgroup');\r\n      optgroup.label = optionValue;\r\n      optgroup.disabled = false; // not configurable for now\r\n      select.appendChild(optgroup);\r\n      optionLabel.forEach(o => renderOption(optgroup, o[1], o[0]));\r\n    } else {\r\n      // case of <option>\r\n      renderOption(select, optionLabel, optionValue);\r\n    }\r\n  });\r\n  select.focus();\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} popup\r\n * @param {InputOptionFlattened[]} inputOptions\r\n * @param {SweetAlertOptions} params\r\n */\r\nfunction populateRadioOptions(popup, inputOptions, params) {\r\n  const radio = getDirectChildByClass(popup, swalClasses.radio);\r\n  if (!radio) {\r\n    return;\r\n  }\r\n  inputOptions.forEach(inputOption => {\r\n    const radioValue = inputOption[0];\r\n    const radioLabel = inputOption[1];\r\n    const radioInput = document.createElement('input');\r\n    const radioLabelElement = document.createElement('label');\r\n    radioInput.type = 'radio';\r\n    radioInput.name = swalClasses.radio;\r\n    radioInput.value = radioValue;\r\n    if (isSelected(radioValue, params.inputValue)) {\r\n      radioInput.checked = true;\r\n    }\r\n    const label = document.createElement('span');\r\n    setInnerHtml(label, radioLabel);\r\n    label.className = swalClasses.label;\r\n    radioLabelElement.appendChild(radioInput);\r\n    radioLabelElement.appendChild(label);\r\n    radio.appendChild(radioLabelElement);\r\n  });\r\n  const radios = radio.querySelectorAll('input');\r\n  if (radios.length) {\r\n    radios[0].focus();\r\n  }\r\n}\r\n\r\n/**\r\n * Converts `inputOptions` into an array of `[value, label]`s\r\n *\r\n * @param {Record<string, any>} inputOptions\r\n * @typedef {string[]} InputOptionFlattened\r\n * @returns {InputOptionFlattened[]}\r\n */\r\nconst formatInputOptions = inputOptions => {\r\n  /** @type {InputOptionFlattened[]} */\r\n  const result = [];\r\n  if (inputOptions instanceof Map) {\r\n    inputOptions.forEach((value, key) => {\r\n      let valueFormatted = value;\r\n      if (typeof valueFormatted === 'object') {\r\n        // case of <optgroup>\r\n        valueFormatted = formatInputOptions(valueFormatted);\r\n      }\r\n      result.push([key, valueFormatted]);\r\n    });\r\n  } else {\r\n    Object.keys(inputOptions).forEach(key => {\r\n      let valueFormatted = inputOptions[key];\r\n      if (typeof valueFormatted === 'object') {\r\n        // case of <optgroup>\r\n        valueFormatted = formatInputOptions(valueFormatted);\r\n      }\r\n      result.push([key, valueFormatted]);\r\n    });\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * @param {string} optionValue\r\n * @param {SweetAlertInputValue} inputValue\r\n * @returns {boolean}\r\n */\r\nconst isSelected = (optionValue, inputValue) => {\r\n  return !!inputValue && inputValue.toString() === optionValue.toString();\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n */\r\nconst handleConfirmButtonClick = instance => {\r\n  const innerParams = privateProps.innerParams.get(instance);\r\n  instance.disableButtons();\r\n  if (innerParams.input) {\r\n    handleConfirmOrDenyWithInput(instance, 'confirm');\r\n  } else {\r\n    confirm(instance, true);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n */\r\nconst handleDenyButtonClick = instance => {\r\n  const innerParams = privateProps.innerParams.get(instance);\r\n  instance.disableButtons();\r\n  if (innerParams.returnInputValueOnDeny) {\r\n    handleConfirmOrDenyWithInput(instance, 'deny');\r\n  } else {\r\n    deny(instance, false);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {Function} dismissWith\r\n */\r\nconst handleCancelButtonClick = (instance, dismissWith) => {\r\n  instance.disableButtons();\r\n  dismissWith(DismissReason.cancel);\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {'confirm' | 'deny'} type\r\n */\r\nconst handleConfirmOrDenyWithInput = (instance, type) => {\r\n  const innerParams = privateProps.innerParams.get(instance);\r\n  if (!innerParams.input) {\r\n    error(`The \"input\" parameter is needed to be set when using returnInputValueOn${capitalizeFirstLetter(type)}`);\r\n    return;\r\n  }\r\n  const input = instance.getInput();\r\n  const inputValue = getInputValue(instance, innerParams);\r\n  if (innerParams.inputValidator) {\r\n    handleInputValidator(instance, inputValue, type);\r\n  } else if (input && !input.checkValidity()) {\r\n    instance.enableButtons();\r\n    instance.showValidationMessage(innerParams.validationMessage || input.validationMessage);\r\n  } else if (type === 'deny') {\r\n    deny(instance, inputValue);\r\n  } else {\r\n    confirm(instance, inputValue);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {SweetAlertInputValue} inputValue\r\n * @param {'confirm' | 'deny'} type\r\n */\r\nconst handleInputValidator = (instance, inputValue, type) => {\r\n  const innerParams = privateProps.innerParams.get(instance);\r\n  instance.disableInput();\r\n  const validationPromise = Promise.resolve().then(() => asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage)));\r\n  validationPromise.then(validationMessage => {\r\n    instance.enableButtons();\r\n    instance.enableInput();\r\n    if (validationMessage) {\r\n      instance.showValidationMessage(validationMessage);\r\n    } else if (type === 'deny') {\r\n      deny(instance, inputValue);\r\n    } else {\r\n      confirm(instance, inputValue);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {any} value\r\n */\r\nconst deny = (instance, value) => {\r\n  const innerParams = privateProps.innerParams.get(instance || undefined);\r\n  if (innerParams.showLoaderOnDeny) {\r\n    showLoading(getDenyButton());\r\n  }\r\n  if (innerParams.preDeny) {\r\n    instance.isAwaitingPromise = true; // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preDeny's promise is received\r\n    const preDenyPromise = Promise.resolve().then(() => asPromise(innerParams.preDeny(value, innerParams.validationMessage)));\r\n    preDenyPromise.then(preDenyValue => {\r\n      if (preDenyValue === false) {\r\n        instance.hideLoading();\r\n        handleAwaitingPromise(instance);\r\n      } else {\r\n        instance.close({\r\n          isDenied: true,\r\n          value: typeof preDenyValue === 'undefined' ? value : preDenyValue\r\n        });\r\n      }\r\n    }).catch(error => rejectWith(instance || undefined, error));\r\n  } else {\r\n    instance.close({\r\n      isDenied: true,\r\n      value\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {any} value\r\n */\r\nconst succeedWith = (instance, value) => {\r\n  instance.close({\r\n    isConfirmed: true,\r\n    value\r\n  });\r\n};\r\n\r\n/**\r\n *\r\n * @param {SweetAlert} instance\r\n * @param {string} error\r\n */\r\nconst rejectWith = (instance, error) => {\r\n  instance.rejectPromise(error);\r\n};\r\n\r\n/**\r\n *\r\n * @param {SweetAlert} instance\r\n * @param {any} value\r\n */\r\nconst confirm = (instance, value) => {\r\n  const innerParams = privateProps.innerParams.get(instance || undefined);\r\n  if (innerParams.showLoaderOnConfirm) {\r\n    showLoading();\r\n  }\r\n  if (innerParams.preConfirm) {\r\n    instance.resetValidationMessage();\r\n    instance.isAwaitingPromise = true; // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preConfirm's promise is received\r\n    const preConfirmPromise = Promise.resolve().then(() => asPromise(innerParams.preConfirm(value, innerParams.validationMessage)));\r\n    preConfirmPromise.then(preConfirmValue => {\r\n      if (isVisible$1(getValidationMessage()) || preConfirmValue === false) {\r\n        instance.hideLoading();\r\n        handleAwaitingPromise(instance);\r\n      } else {\r\n        succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);\r\n      }\r\n    }).catch(error => rejectWith(instance || undefined, error));\r\n  } else {\r\n    succeedWith(instance, value);\r\n  }\r\n};\r\n\r\n/**\r\n * Hides loader and shows back the button which was hidden by .showLoading()\r\n */\r\nfunction hideLoading() {\r\n  // do nothing if popup is closed\r\n  const innerParams = privateProps.innerParams.get(this);\r\n  if (!innerParams) {\r\n    return;\r\n  }\r\n  const domCache = privateProps.domCache.get(this);\r\n  hide(domCache.loader);\r\n  if (isToast()) {\r\n    if (innerParams.icon) {\r\n      show(getIcon());\r\n    }\r\n  } else {\r\n    showRelatedButton(domCache);\r\n  }\r\n  removeClass([domCache.popup, domCache.actions], swalClasses.loading);\r\n  domCache.popup.removeAttribute('aria-busy');\r\n  domCache.popup.removeAttribute('data-loading');\r\n  domCache.confirmButton.disabled = false;\r\n  domCache.denyButton.disabled = false;\r\n  domCache.cancelButton.disabled = false;\r\n}\r\nconst showRelatedButton = domCache => {\r\n  const buttonToReplace = domCache.popup.getElementsByClassName(domCache.loader.getAttribute('data-button-to-replace'));\r\n  if (buttonToReplace.length) {\r\n    show(buttonToReplace[0], 'inline-block');\r\n  } else if (allButtonsAreHidden()) {\r\n    hide(domCache.actions);\r\n  }\r\n};\r\n\r\n/**\r\n * Gets the input DOM node, this method works with input parameter.\r\n *\r\n * @returns {HTMLInputElement | null}\r\n */\r\nfunction getInput() {\r\n  const innerParams = privateProps.innerParams.get(this);\r\n  const domCache = privateProps.domCache.get(this);\r\n  if (!domCache) {\r\n    return null;\r\n  }\r\n  return getInput$1(domCache.popup, innerParams.input);\r\n}\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {string[]} buttons\r\n * @param {boolean} disabled\r\n */\r\nfunction setButtonsDisabled(instance, buttons, disabled) {\r\n  const domCache = privateProps.domCache.get(instance);\r\n  buttons.forEach(button => {\r\n    domCache[button].disabled = disabled;\r\n  });\r\n}\r\n\r\n/**\r\n * @param {HTMLInputElement | null} input\r\n * @param {boolean} disabled\r\n */\r\nfunction setInputDisabled(input, disabled) {\r\n  const popup = getPopup();\r\n  if (!popup || !input) {\r\n    return;\r\n  }\r\n  if (input.type === 'radio') {\r\n    /** @type {NodeListOf<HTMLInputElement>} */\r\n    const radios = popup.querySelectorAll(`[name=\"${swalClasses.radio}\"]`);\r\n    for (let i = 0; i < radios.length; i++) {\r\n      radios[i].disabled = disabled;\r\n    }\r\n  } else {\r\n    input.disabled = disabled;\r\n  }\r\n}\r\n\r\n/**\r\n * Enable all the buttons\r\n * @this {SweetAlert}\r\n */\r\nfunction enableButtons() {\r\n  setButtonsDisabled(this, ['confirmButton', 'denyButton', 'cancelButton'], false);\r\n}\r\n\r\n/**\r\n * Disable all the buttons\r\n * @this {SweetAlert}\r\n */\r\nfunction disableButtons() {\r\n  setButtonsDisabled(this, ['confirmButton', 'denyButton', 'cancelButton'], true);\r\n}\r\n\r\n/**\r\n * Enable the input field\r\n * @this {SweetAlert}\r\n */\r\nfunction enableInput() {\r\n  setInputDisabled(this.getInput(), false);\r\n}\r\n\r\n/**\r\n * Disable the input field\r\n * @this {SweetAlert}\r\n */\r\nfunction disableInput() {\r\n  setInputDisabled(this.getInput(), true);\r\n}\r\n\r\n/**\r\n * Show block with validation message\r\n *\r\n * @param {string} error\r\n * @this {SweetAlert}\r\n */\r\nfunction showValidationMessage(error) {\r\n  const domCache = privateProps.domCache.get(this);\r\n  const params = privateProps.innerParams.get(this);\r\n  setInnerHtml(domCache.validationMessage, error);\r\n  domCache.validationMessage.className = swalClasses['validation-message'];\r\n  if (params.customClass && params.customClass.validationMessage) {\r\n    addClass(domCache.validationMessage, params.customClass.validationMessage);\r\n  }\r\n  show(domCache.validationMessage);\r\n  const input = this.getInput();\r\n  if (input) {\r\n    input.setAttribute('aria-invalid', 'true');\r\n    input.setAttribute('aria-describedby', swalClasses['validation-message']);\r\n    focusInput(input);\r\n    addClass(input, swalClasses.inputerror);\r\n  }\r\n}\r\n\r\n/**\r\n * Hide block with validation message\r\n *\r\n * @this {SweetAlert}\r\n */\r\nfunction resetValidationMessage() {\r\n  const domCache = privateProps.domCache.get(this);\r\n  if (domCache.validationMessage) {\r\n    hide(domCache.validationMessage);\r\n  }\r\n  const input = this.getInput();\r\n  if (input) {\r\n    input.removeAttribute('aria-invalid');\r\n    input.removeAttribute('aria-describedby');\r\n    removeClass(input, swalClasses.inputerror);\r\n  }\r\n}\r\n\r\nconst defaultParams = {\r\n  title: '',\r\n  titleText: '',\r\n  text: '',\r\n  html: '',\r\n  footer: '',\r\n  icon: undefined,\r\n  iconColor: undefined,\r\n  iconHtml: undefined,\r\n  template: undefined,\r\n  toast: false,\r\n  draggable: false,\r\n  animation: true,\r\n  showClass: {\r\n    popup: 'swal2-show',\r\n    backdrop: 'swal2-backdrop-show',\r\n    icon: 'swal2-icon-show'\r\n  },\r\n  hideClass: {\r\n    popup: 'swal2-hide',\r\n    backdrop: 'swal2-backdrop-hide',\r\n    icon: 'swal2-icon-hide'\r\n  },\r\n  customClass: {},\r\n  target: 'body',\r\n  color: undefined,\r\n  backdrop: true,\r\n  heightAuto: true,\r\n  allowOutsideClick: true,\r\n  allowEscapeKey: true,\r\n  allowEnterKey: true,\r\n  stopKeydownPropagation: true,\r\n  keydownListenerCapture: false,\r\n  showConfirmButton: true,\r\n  showDenyButton: false,\r\n  showCancelButton: false,\r\n  preConfirm: undefined,\r\n  preDeny: undefined,\r\n  confirmButtonText: 'OK',\r\n  confirmButtonAriaLabel: '',\r\n  confirmButtonColor: undefined,\r\n  denyButtonText: 'No',\r\n  denyButtonAriaLabel: '',\r\n  denyButtonColor: undefined,\r\n  cancelButtonText: 'Cancel',\r\n  cancelButtonAriaLabel: '',\r\n  cancelButtonColor: undefined,\r\n  buttonsStyling: true,\r\n  reverseButtons: false,\r\n  focusConfirm: true,\r\n  focusDeny: false,\r\n  focusCancel: false,\r\n  returnFocus: true,\r\n  showCloseButton: false,\r\n  closeButtonHtml: '&times;',\r\n  closeButtonAriaLabel: 'Close this dialog',\r\n  loaderHtml: '',\r\n  showLoaderOnConfirm: false,\r\n  showLoaderOnDeny: false,\r\n  imageUrl: undefined,\r\n  imageWidth: undefined,\r\n  imageHeight: undefined,\r\n  imageAlt: '',\r\n  timer: undefined,\r\n  timerProgressBar: false,\r\n  width: undefined,\r\n  padding: undefined,\r\n  background: undefined,\r\n  input: undefined,\r\n  inputPlaceholder: '',\r\n  inputLabel: '',\r\n  inputValue: '',\r\n  inputOptions: {},\r\n  inputAutoFocus: true,\r\n  inputAutoTrim: true,\r\n  inputAttributes: {},\r\n  inputValidator: undefined,\r\n  returnInputValueOnDeny: false,\r\n  validationMessage: undefined,\r\n  grow: false,\r\n  position: 'center',\r\n  progressSteps: [],\r\n  currentProgressStep: undefined,\r\n  progressStepsDistance: undefined,\r\n  willOpen: undefined,\r\n  didOpen: undefined,\r\n  didRender: undefined,\r\n  willClose: undefined,\r\n  didClose: undefined,\r\n  didDestroy: undefined,\r\n  scrollbarPadding: true\r\n};\r\nconst updatableParams = ['allowEscapeKey', 'allowOutsideClick', 'background', 'buttonsStyling', 'cancelButtonAriaLabel', 'cancelButtonColor', 'cancelButtonText', 'closeButtonAriaLabel', 'closeButtonHtml', 'color', 'confirmButtonAriaLabel', 'confirmButtonColor', 'confirmButtonText', 'currentProgressStep', 'customClass', 'denyButtonAriaLabel', 'denyButtonColor', 'denyButtonText', 'didClose', 'didDestroy', 'draggable', 'footer', 'hideClass', 'html', 'icon', 'iconColor', 'iconHtml', 'imageAlt', 'imageHeight', 'imageUrl', 'imageWidth', 'preConfirm', 'preDeny', 'progressSteps', 'returnFocus', 'reverseButtons', 'showCancelButton', 'showCloseButton', 'showConfirmButton', 'showDenyButton', 'text', 'title', 'titleText', 'willClose'];\r\n\r\n/** @type {Record<string, string | undefined>} */\r\nconst deprecatedParams = {\r\n  allowEnterKey: undefined\r\n};\r\nconst toastIncompatibleParams = ['allowOutsideClick', 'allowEnterKey', 'backdrop', 'draggable', 'focusConfirm', 'focusDeny', 'focusCancel', 'returnFocus', 'heightAuto', 'keydownListenerCapture'];\r\n\r\n/**\r\n * Is valid parameter\r\n *\r\n * @param {string} paramName\r\n * @returns {boolean}\r\n */\r\nconst isValidParameter = paramName => {\r\n  return Object.prototype.hasOwnProperty.call(defaultParams, paramName);\r\n};\r\n\r\n/**\r\n * Is valid parameter for Swal.update() method\r\n *\r\n * @param {string} paramName\r\n * @returns {boolean}\r\n */\r\nconst isUpdatableParameter = paramName => {\r\n  return updatableParams.indexOf(paramName) !== -1;\r\n};\r\n\r\n/**\r\n * Is deprecated parameter\r\n *\r\n * @param {string} paramName\r\n * @returns {string | undefined}\r\n */\r\nconst isDeprecatedParameter = paramName => {\r\n  return deprecatedParams[paramName];\r\n};\r\n\r\n/**\r\n * @param {string} param\r\n */\r\nconst checkIfParamIsValid = param => {\r\n  if (!isValidParameter(param)) {\r\n    warn(`Unknown parameter \"${param}\"`);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {string} param\r\n */\r\nconst checkIfToastParamIsValid = param => {\r\n  if (toastIncompatibleParams.includes(param)) {\r\n    warn(`The parameter \"${param}\" is incompatible with toasts`);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {string} param\r\n */\r\nconst checkIfParamIsDeprecated = param => {\r\n  const isDeprecated = isDeprecatedParameter(param);\r\n  if (isDeprecated) {\r\n    warnAboutDeprecation(param, isDeprecated);\r\n  }\r\n};\r\n\r\n/**\r\n * Show relevant warnings for given params\r\n *\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst showWarningsForParams = params => {\r\n  if (params.backdrop === false && params.allowOutsideClick) {\r\n    warn('\"allowOutsideClick\" parameter requires `backdrop` parameter to be set to `true`');\r\n  }\r\n  for (const param in params) {\r\n    checkIfParamIsValid(param);\r\n    if (params.toast) {\r\n      checkIfToastParamIsValid(param);\r\n    }\r\n    checkIfParamIsDeprecated(param);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates popup parameters.\r\n *\r\n * @param {SweetAlertOptions} params\r\n */\r\nfunction update(params) {\r\n  const popup = getPopup();\r\n  const innerParams = privateProps.innerParams.get(this);\r\n  if (!popup || hasClass(popup, innerParams.hideClass.popup)) {\r\n    warn(`You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.`);\r\n    return;\r\n  }\r\n  const validUpdatableParams = filterValidParams(params);\r\n  const updatedParams = Object.assign({}, innerParams, validUpdatableParams);\r\n  render(this, updatedParams);\r\n  privateProps.innerParams.set(this, updatedParams);\r\n  Object.defineProperties(this, {\r\n    params: {\r\n      value: Object.assign({}, this.params, params),\r\n      writable: false,\r\n      enumerable: true\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @param {SweetAlertOptions} params\r\n * @returns {SweetAlertOptions}\r\n */\r\nconst filterValidParams = params => {\r\n  const validUpdatableParams = {};\r\n  Object.keys(params).forEach(param => {\r\n    if (isUpdatableParameter(param)) {\r\n      validUpdatableParams[param] = params[param];\r\n    } else {\r\n      warn(`Invalid parameter to update: ${param}`);\r\n    }\r\n  });\r\n  return validUpdatableParams;\r\n};\r\n\r\n/**\r\n * Dispose the current SweetAlert2 instance\r\n */\r\nfunction _destroy() {\r\n  const domCache = privateProps.domCache.get(this);\r\n  const innerParams = privateProps.innerParams.get(this);\r\n  if (!innerParams) {\r\n    disposeWeakMaps(this); // The WeakMaps might have been partly destroyed, we must recall it to dispose any remaining WeakMaps #2335\r\n    return; // This instance has already been destroyed\r\n  }\r\n\r\n  // Check if there is another Swal closing\r\n  if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\r\n    globalState.swalCloseEventFinishedCallback();\r\n    delete globalState.swalCloseEventFinishedCallback;\r\n  }\r\n  if (typeof innerParams.didDestroy === 'function') {\r\n    innerParams.didDestroy();\r\n  }\r\n  globalState.eventEmitter.emit('didDestroy');\r\n  disposeSwal(this);\r\n}\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n */\r\nconst disposeSwal = instance => {\r\n  disposeWeakMaps(instance);\r\n  // Unset this.params so GC will dispose it (#1569)\r\n  delete instance.params;\r\n  // Unset globalState props so GC will dispose globalState (#1569)\r\n  delete globalState.keydownHandler;\r\n  delete globalState.keydownTarget;\r\n  // Unset currentInstance\r\n  delete globalState.currentInstance;\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n */\r\nconst disposeWeakMaps = instance => {\r\n  // If the current instance is awaiting a promise result, we keep the privateMethods to call them once the promise result is retrieved #2335\r\n  if (instance.isAwaitingPromise) {\r\n    unsetWeakMaps(privateProps, instance);\r\n    instance.isAwaitingPromise = true;\r\n  } else {\r\n    unsetWeakMaps(privateMethods, instance);\r\n    unsetWeakMaps(privateProps, instance);\r\n    delete instance.isAwaitingPromise;\r\n    // Unset instance methods\r\n    delete instance.disableButtons;\r\n    delete instance.enableButtons;\r\n    delete instance.getInput;\r\n    delete instance.disableInput;\r\n    delete instance.enableInput;\r\n    delete instance.hideLoading;\r\n    delete instance.disableLoading;\r\n    delete instance.showValidationMessage;\r\n    delete instance.resetValidationMessage;\r\n    delete instance.close;\r\n    delete instance.closePopup;\r\n    delete instance.closeModal;\r\n    delete instance.closeToast;\r\n    delete instance.rejectPromise;\r\n    delete instance.update;\r\n    delete instance._destroy;\r\n  }\r\n};\r\n\r\n/**\r\n * @param {object} obj\r\n * @param {SweetAlert} instance\r\n */\r\nconst unsetWeakMaps = (obj, instance) => {\r\n  for (const i in obj) {\r\n    obj[i].delete(instance);\r\n  }\r\n};\r\n\r\nvar instanceMethods = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  _destroy: _destroy,\r\n  close: close,\r\n  closeModal: close,\r\n  closePopup: close,\r\n  closeToast: close,\r\n  disableButtons: disableButtons,\r\n  disableInput: disableInput,\r\n  disableLoading: hideLoading,\r\n  enableButtons: enableButtons,\r\n  enableInput: enableInput,\r\n  getInput: getInput,\r\n  handleAwaitingPromise: handleAwaitingPromise,\r\n  hideLoading: hideLoading,\r\n  rejectPromise: rejectPromise,\r\n  resetValidationMessage: resetValidationMessage,\r\n  showValidationMessage: showValidationMessage,\r\n  update: update\r\n});\r\n\r\n/**\r\n * @param {SweetAlertOptions} innerParams\r\n * @param {DomCache} domCache\r\n * @param {Function} dismissWith\r\n */\r\nconst handlePopupClick = (innerParams, domCache, dismissWith) => {\r\n  if (innerParams.toast) {\r\n    handleToastClick(innerParams, domCache, dismissWith);\r\n  } else {\r\n    // Ignore click events that had mousedown on the popup but mouseup on the container\r\n    // This can happen when the user drags a slider\r\n    handleModalMousedown(domCache);\r\n\r\n    // Ignore click events that had mousedown on the container but mouseup on the popup\r\n    handleContainerMousedown(domCache);\r\n    handleModalClick(innerParams, domCache, dismissWith);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {SweetAlertOptions} innerParams\r\n * @param {DomCache} domCache\r\n * @param {Function} dismissWith\r\n */\r\nconst handleToastClick = (innerParams, domCache, dismissWith) => {\r\n  // Closing toast by internal click\r\n  domCache.popup.onclick = () => {\r\n    if (innerParams && (isAnyButtonShown(innerParams) || innerParams.timer || innerParams.input)) {\r\n      return;\r\n    }\r\n    dismissWith(DismissReason.close);\r\n  };\r\n};\r\n\r\n/**\r\n * @param {SweetAlertOptions} innerParams\r\n * @returns {boolean}\r\n */\r\nconst isAnyButtonShown = innerParams => {\r\n  return !!(innerParams.showConfirmButton || innerParams.showDenyButton || innerParams.showCancelButton || innerParams.showCloseButton);\r\n};\r\nlet ignoreOutsideClick = false;\r\n\r\n/**\r\n * @param {DomCache} domCache\r\n */\r\nconst handleModalMousedown = domCache => {\r\n  domCache.popup.onmousedown = () => {\r\n    domCache.container.onmouseup = function (e) {\r\n      domCache.container.onmouseup = () => {};\r\n      // We only check if the mouseup target is the container because usually it doesn't\r\n      // have any other direct children aside of the popup\r\n      if (e.target === domCache.container) {\r\n        ignoreOutsideClick = true;\r\n      }\r\n    };\r\n  };\r\n};\r\n\r\n/**\r\n * @param {DomCache} domCache\r\n */\r\nconst handleContainerMousedown = domCache => {\r\n  domCache.container.onmousedown = e => {\r\n    // prevent the modal text from being selected on double click on the container (allowOutsideClick: false)\r\n    if (e.target === domCache.container) {\r\n      e.preventDefault();\r\n    }\r\n    domCache.popup.onmouseup = function (e) {\r\n      domCache.popup.onmouseup = () => {};\r\n      // We also need to check if the mouseup target is a child of the popup\r\n      if (e.target === domCache.popup || e.target instanceof HTMLElement && domCache.popup.contains(e.target)) {\r\n        ignoreOutsideClick = true;\r\n      }\r\n    };\r\n  };\r\n};\r\n\r\n/**\r\n * @param {SweetAlertOptions} innerParams\r\n * @param {DomCache} domCache\r\n * @param {Function} dismissWith\r\n */\r\nconst handleModalClick = (innerParams, domCache, dismissWith) => {\r\n  domCache.container.onclick = e => {\r\n    if (ignoreOutsideClick) {\r\n      ignoreOutsideClick = false;\r\n      return;\r\n    }\r\n    if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {\r\n      dismissWith(DismissReason.backdrop);\r\n    }\r\n  };\r\n};\r\n\r\nconst isJqueryElement = elem => typeof elem === 'object' && elem.jquery;\r\nconst isElement = elem => elem instanceof Element || isJqueryElement(elem);\r\nconst argsToParams = args => {\r\n  const params = {};\r\n  if (typeof args[0] === 'object' && !isElement(args[0])) {\r\n    Object.assign(params, args[0]);\r\n  } else {\r\n    ['title', 'html', 'icon'].forEach((name, index) => {\r\n      const arg = args[index];\r\n      if (typeof arg === 'string' || isElement(arg)) {\r\n        params[name] = arg;\r\n      } else if (arg !== undefined) {\r\n        error(`Unexpected type of ${name}! Expected \"string\" or \"Element\", got ${typeof arg}`);\r\n      }\r\n    });\r\n  }\r\n  return params;\r\n};\r\n\r\n/**\r\n * Main method to create a new SweetAlert2 popup\r\n *\r\n * @param  {...SweetAlertOptions} args\r\n * @returns {Promise<SweetAlertResult>}\r\n */\r\nfunction fire() {\r\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n    args[_key] = arguments[_key];\r\n  }\r\n  return new this(...args);\r\n}\r\n\r\n/**\r\n * Returns an extended version of `Swal` containing `params` as defaults.\r\n * Useful for reusing Swal configuration.\r\n *\r\n * For example:\r\n *\r\n * Before:\r\n * const textPromptOptions = { input: 'text', showCancelButton: true }\r\n * const {value: firstName} = await Swal.fire({ ...textPromptOptions, title: 'What is your first name?' })\r\n * const {value: lastName} = await Swal.fire({ ...textPromptOptions, title: 'What is your last name?' })\r\n *\r\n * After:\r\n * const TextPrompt = Swal.mixin({ input: 'text', showCancelButton: true })\r\n * const {value: firstName} = await TextPrompt('What is your first name?')\r\n * const {value: lastName} = await TextPrompt('What is your last name?')\r\n *\r\n * @param {SweetAlertOptions} mixinParams\r\n * @returns {SweetAlert}\r\n */\r\nfunction mixin(mixinParams) {\r\n  class MixinSwal extends this {\r\n    _main(params, priorityMixinParams) {\r\n      return super._main(params, Object.assign({}, mixinParams, priorityMixinParams));\r\n    }\r\n  }\r\n  // @ts-ignore\r\n  return MixinSwal;\r\n}\r\n\r\n/**\r\n * If `timer` parameter is set, returns number of milliseconds of timer remained.\r\n * Otherwise, returns undefined.\r\n *\r\n * @returns {number | undefined}\r\n */\r\nconst getTimerLeft = () => {\r\n  return globalState.timeout && globalState.timeout.getTimerLeft();\r\n};\r\n\r\n/**\r\n * Stop timer. Returns number of milliseconds of timer remained.\r\n * If `timer` parameter isn't set, returns undefined.\r\n *\r\n * @returns {number | undefined}\r\n */\r\nconst stopTimer = () => {\r\n  if (globalState.timeout) {\r\n    stopTimerProgressBar();\r\n    return globalState.timeout.stop();\r\n  }\r\n};\r\n\r\n/**\r\n * Resume timer. Returns number of milliseconds of timer remained.\r\n * If `timer` parameter isn't set, returns undefined.\r\n *\r\n * @returns {number | undefined}\r\n */\r\nconst resumeTimer = () => {\r\n  if (globalState.timeout) {\r\n    const remaining = globalState.timeout.start();\r\n    animateTimerProgressBar(remaining);\r\n    return remaining;\r\n  }\r\n};\r\n\r\n/**\r\n * Resume timer. Returns number of milliseconds of timer remained.\r\n * If `timer` parameter isn't set, returns undefined.\r\n *\r\n * @returns {number | undefined}\r\n */\r\nconst toggleTimer = () => {\r\n  const timer = globalState.timeout;\r\n  return timer && (timer.running ? stopTimer() : resumeTimer());\r\n};\r\n\r\n/**\r\n * Increase timer. Returns number of milliseconds of an updated timer.\r\n * If `timer` parameter isn't set, returns undefined.\r\n *\r\n * @param {number} ms\r\n * @returns {number | undefined}\r\n */\r\nconst increaseTimer = ms => {\r\n  if (globalState.timeout) {\r\n    const remaining = globalState.timeout.increase(ms);\r\n    animateTimerProgressBar(remaining, true);\r\n    return remaining;\r\n  }\r\n};\r\n\r\n/**\r\n * Check if timer is running. Returns true if timer is running\r\n * or false if timer is paused or stopped.\r\n * If `timer` parameter isn't set, returns undefined\r\n *\r\n * @returns {boolean}\r\n */\r\nconst isTimerRunning = () => {\r\n  return !!(globalState.timeout && globalState.timeout.isRunning());\r\n};\r\n\r\nlet bodyClickListenerAdded = false;\r\nconst clickHandlers = {};\r\n\r\n/**\r\n * @param {string} attr\r\n */\r\nfunction bindClickHandler() {\r\n  let attr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'data-swal-template';\r\n  clickHandlers[attr] = this;\r\n  if (!bodyClickListenerAdded) {\r\n    document.body.addEventListener('click', bodyClickListener);\r\n    bodyClickListenerAdded = true;\r\n  }\r\n}\r\nconst bodyClickListener = event => {\r\n  for (let el = event.target; el && el !== document; el = el.parentNode) {\r\n    for (const attr in clickHandlers) {\r\n      const template = el.getAttribute(attr);\r\n      if (template) {\r\n        clickHandlers[attr].fire({\r\n          template\r\n        });\r\n        return;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Source: https://gist.github.com/mudge/5830382?permalink_comment_id=2691957#gistcomment-2691957\r\n\r\nclass EventEmitter {\r\n  constructor() {\r\n    /** @type {Events} */\r\n    this.events = {};\r\n  }\r\n\r\n  /**\r\n   * @param {string} eventName\r\n   * @returns {EventHandlers}\r\n   */\r\n  _getHandlersByEventName(eventName) {\r\n    if (typeof this.events[eventName] === 'undefined') {\r\n      // not Set because we need to keep the FIFO order\r\n      // https://github.com/sweetalert2/sweetalert2/pull/2763#discussion_r1748990334\r\n      this.events[eventName] = [];\r\n    }\r\n    return this.events[eventName];\r\n  }\r\n\r\n  /**\r\n   * @param {string} eventName\r\n   * @param {EventHandler} eventHandler\r\n   */\r\n  on(eventName, eventHandler) {\r\n    const currentHandlers = this._getHandlersByEventName(eventName);\r\n    if (!currentHandlers.includes(eventHandler)) {\r\n      currentHandlers.push(eventHandler);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} eventName\r\n   * @param {EventHandler} eventHandler\r\n   */\r\n  once(eventName, eventHandler) {\r\n    var _this = this;\r\n    /**\r\n     * @param {Array} args\r\n     */\r\n    const onceFn = function () {\r\n      _this.removeListener(eventName, onceFn);\r\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n        args[_key] = arguments[_key];\r\n      }\r\n      eventHandler.apply(_this, args);\r\n    };\r\n    this.on(eventName, onceFn);\r\n  }\r\n\r\n  /**\r\n   * @param {string} eventName\r\n   * @param {Array} args\r\n   */\r\n  emit(eventName) {\r\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\r\n      args[_key2 - 1] = arguments[_key2];\r\n    }\r\n    this._getHandlersByEventName(eventName).forEach(\r\n    /**\r\n     * @param {EventHandler} eventHandler\r\n     */\r\n    eventHandler => {\r\n      try {\r\n        eventHandler.apply(this, args);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {string} eventName\r\n   * @param {EventHandler} eventHandler\r\n   */\r\n  removeListener(eventName, eventHandler) {\r\n    const currentHandlers = this._getHandlersByEventName(eventName);\r\n    const index = currentHandlers.indexOf(eventHandler);\r\n    if (index > -1) {\r\n      currentHandlers.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} eventName\r\n   */\r\n  removeAllListeners(eventName) {\r\n    if (this.events[eventName] !== undefined) {\r\n      // https://github.com/sweetalert2/sweetalert2/pull/2763#discussion_r1749239222\r\n      this.events[eventName].length = 0;\r\n    }\r\n  }\r\n  reset() {\r\n    this.events = {};\r\n  }\r\n}\r\n\r\nglobalState.eventEmitter = new EventEmitter();\r\n\r\n/**\r\n * @param {string} eventName\r\n * @param {EventHandler} eventHandler\r\n */\r\nconst on = (eventName, eventHandler) => {\r\n  globalState.eventEmitter.on(eventName, eventHandler);\r\n};\r\n\r\n/**\r\n * @param {string} eventName\r\n * @param {EventHandler} eventHandler\r\n */\r\nconst once = (eventName, eventHandler) => {\r\n  globalState.eventEmitter.once(eventName, eventHandler);\r\n};\r\n\r\n/**\r\n * @param {string} [eventName]\r\n * @param {EventHandler} [eventHandler]\r\n */\r\nconst off = (eventName, eventHandler) => {\r\n  // Remove all handlers for all events\r\n  if (!eventName) {\r\n    globalState.eventEmitter.reset();\r\n    return;\r\n  }\r\n  if (eventHandler) {\r\n    // Remove a specific handler\r\n    globalState.eventEmitter.removeListener(eventName, eventHandler);\r\n  } else {\r\n    // Remove all handlers for a specific event\r\n    globalState.eventEmitter.removeAllListeners(eventName);\r\n  }\r\n};\r\n\r\nvar staticMethods = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  argsToParams: argsToParams,\r\n  bindClickHandler: bindClickHandler,\r\n  clickCancel: clickCancel,\r\n  clickConfirm: clickConfirm,\r\n  clickDeny: clickDeny,\r\n  enableLoading: showLoading,\r\n  fire: fire,\r\n  getActions: getActions,\r\n  getCancelButton: getCancelButton,\r\n  getCloseButton: getCloseButton,\r\n  getConfirmButton: getConfirmButton,\r\n  getContainer: getContainer,\r\n  getDenyButton: getDenyButton,\r\n  getFocusableElements: getFocusableElements,\r\n  getFooter: getFooter,\r\n  getHtmlContainer: getHtmlContainer,\r\n  getIcon: getIcon,\r\n  getIconContent: getIconContent,\r\n  getImage: getImage,\r\n  getInputLabel: getInputLabel,\r\n  getLoader: getLoader,\r\n  getPopup: getPopup,\r\n  getProgressSteps: getProgressSteps,\r\n  getTimerLeft: getTimerLeft,\r\n  getTimerProgressBar: getTimerProgressBar,\r\n  getTitle: getTitle,\r\n  getValidationMessage: getValidationMessage,\r\n  increaseTimer: increaseTimer,\r\n  isDeprecatedParameter: isDeprecatedParameter,\r\n  isLoading: isLoading,\r\n  isTimerRunning: isTimerRunning,\r\n  isUpdatableParameter: isUpdatableParameter,\r\n  isValidParameter: isValidParameter,\r\n  isVisible: isVisible,\r\n  mixin: mixin,\r\n  off: off,\r\n  on: on,\r\n  once: once,\r\n  resumeTimer: resumeTimer,\r\n  showLoading: showLoading,\r\n  stopTimer: stopTimer,\r\n  toggleTimer: toggleTimer\r\n});\r\n\r\nclass Timer {\r\n  /**\r\n   * @param {Function} callback\r\n   * @param {number} delay\r\n   */\r\n  constructor(callback, delay) {\r\n    this.callback = callback;\r\n    this.remaining = delay;\r\n    this.running = false;\r\n    this.start();\r\n  }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  start() {\r\n    if (!this.running) {\r\n      this.running = true;\r\n      this.started = new Date();\r\n      this.id = setTimeout(this.callback, this.remaining);\r\n    }\r\n    return this.remaining;\r\n  }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  stop() {\r\n    if (this.started && this.running) {\r\n      this.running = false;\r\n      clearTimeout(this.id);\r\n      this.remaining -= new Date().getTime() - this.started.getTime();\r\n    }\r\n    return this.remaining;\r\n  }\r\n\r\n  /**\r\n   * @param {number} n\r\n   * @returns {number}\r\n   */\r\n  increase(n) {\r\n    const running = this.running;\r\n    if (running) {\r\n      this.stop();\r\n    }\r\n    this.remaining += n;\r\n    if (running) {\r\n      this.start();\r\n    }\r\n    return this.remaining;\r\n  }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  getTimerLeft() {\r\n    if (this.running) {\r\n      this.stop();\r\n      this.start();\r\n    }\r\n    return this.remaining;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean}\r\n   */\r\n  isRunning() {\r\n    return this.running;\r\n  }\r\n}\r\n\r\nconst swalStringParams = ['swal-title', 'swal-html', 'swal-footer'];\r\n\r\n/**\r\n * @param {SweetAlertOptions} params\r\n * @returns {SweetAlertOptions}\r\n */\r\nconst getTemplateParams = params => {\r\n  const template = typeof params.template === 'string' ? (/** @type {HTMLTemplateElement} */document.querySelector(params.template)) : params.template;\r\n  if (!template) {\r\n    return {};\r\n  }\r\n  /** @type {DocumentFragment} */\r\n  const templateContent = template.content;\r\n  showWarningsForElements(templateContent);\r\n  const result = Object.assign(getSwalParams(templateContent), getSwalFunctionParams(templateContent), getSwalButtons(templateContent), getSwalImage(templateContent), getSwalIcon(templateContent), getSwalInput(templateContent), getSwalStringParams(templateContent, swalStringParams));\r\n  return result;\r\n};\r\n\r\n/**\r\n * @param {DocumentFragment} templateContent\r\n * @returns {Record<string, any>}\r\n */\r\nconst getSwalParams = templateContent => {\r\n  /** @type {Record<string, any>} */\r\n  const result = {};\r\n  /** @type {HTMLElement[]} */\r\n  const swalParams = Array.from(templateContent.querySelectorAll('swal-param'));\r\n  swalParams.forEach(param => {\r\n    showWarningsForAttributes(param, ['name', 'value']);\r\n    const paramName = /** @type {keyof SweetAlertOptions} */param.getAttribute('name');\r\n    const value = param.getAttribute('value');\r\n    if (!paramName || !value) {\r\n      return;\r\n    }\r\n    if (typeof defaultParams[paramName] === 'boolean') {\r\n      result[paramName] = value !== 'false';\r\n    } else if (typeof defaultParams[paramName] === 'object') {\r\n      result[paramName] = JSON.parse(value);\r\n    } else {\r\n      result[paramName] = value;\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\n/**\r\n * @param {DocumentFragment} templateContent\r\n * @returns {Record<string, any>}\r\n */\r\nconst getSwalFunctionParams = templateContent => {\r\n  /** @type {Record<string, any>} */\r\n  const result = {};\r\n  /** @type {HTMLElement[]} */\r\n  const swalFunctions = Array.from(templateContent.querySelectorAll('swal-function-param'));\r\n  swalFunctions.forEach(param => {\r\n    const paramName = /** @type {keyof SweetAlertOptions} */param.getAttribute('name');\r\n    const value = param.getAttribute('value');\r\n    if (!paramName || !value) {\r\n      return;\r\n    }\r\n    result[paramName] = new Function(`return ${value}`)();\r\n  });\r\n  return result;\r\n};\r\n\r\n/**\r\n * @param {DocumentFragment} templateContent\r\n * @returns {Record<string, any>}\r\n */\r\nconst getSwalButtons = templateContent => {\r\n  /** @type {Record<string, any>} */\r\n  const result = {};\r\n  /** @type {HTMLElement[]} */\r\n  const swalButtons = Array.from(templateContent.querySelectorAll('swal-button'));\r\n  swalButtons.forEach(button => {\r\n    showWarningsForAttributes(button, ['type', 'color', 'aria-label']);\r\n    const type = button.getAttribute('type');\r\n    if (!type || !['confirm', 'cancel', 'deny'].includes(type)) {\r\n      return;\r\n    }\r\n    result[`${type}ButtonText`] = button.innerHTML;\r\n    result[`show${capitalizeFirstLetter(type)}Button`] = true;\r\n    if (button.hasAttribute('color')) {\r\n      result[`${type}ButtonColor`] = button.getAttribute('color');\r\n    }\r\n    if (button.hasAttribute('aria-label')) {\r\n      result[`${type}ButtonAriaLabel`] = button.getAttribute('aria-label');\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\n/**\r\n * @param {DocumentFragment} templateContent\r\n * @returns {Pick<SweetAlertOptions, 'imageUrl' | 'imageWidth' | 'imageHeight' | 'imageAlt'>}\r\n */\r\nconst getSwalImage = templateContent => {\r\n  const result = {};\r\n  /** @type {HTMLElement | null} */\r\n  const image = templateContent.querySelector('swal-image');\r\n  if (image) {\r\n    showWarningsForAttributes(image, ['src', 'width', 'height', 'alt']);\r\n    if (image.hasAttribute('src')) {\r\n      result.imageUrl = image.getAttribute('src') || undefined;\r\n    }\r\n    if (image.hasAttribute('width')) {\r\n      result.imageWidth = image.getAttribute('width') || undefined;\r\n    }\r\n    if (image.hasAttribute('height')) {\r\n      result.imageHeight = image.getAttribute('height') || undefined;\r\n    }\r\n    if (image.hasAttribute('alt')) {\r\n      result.imageAlt = image.getAttribute('alt') || undefined;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * @param {DocumentFragment} templateContent\r\n * @returns {Record<string, any>}\r\n */\r\nconst getSwalIcon = templateContent => {\r\n  const result = {};\r\n  /** @type {HTMLElement | null} */\r\n  const icon = templateContent.querySelector('swal-icon');\r\n  if (icon) {\r\n    showWarningsForAttributes(icon, ['type', 'color']);\r\n    if (icon.hasAttribute('type')) {\r\n      result.icon = icon.getAttribute('type');\r\n    }\r\n    if (icon.hasAttribute('color')) {\r\n      result.iconColor = icon.getAttribute('color');\r\n    }\r\n    result.iconHtml = icon.innerHTML;\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * @param {DocumentFragment} templateContent\r\n * @returns {Record<string, any>}\r\n */\r\nconst getSwalInput = templateContent => {\r\n  /** @type {Record<string, any>} */\r\n  const result = {};\r\n  /** @type {HTMLElement | null} */\r\n  const input = templateContent.querySelector('swal-input');\r\n  if (input) {\r\n    showWarningsForAttributes(input, ['type', 'label', 'placeholder', 'value']);\r\n    result.input = input.getAttribute('type') || 'text';\r\n    if (input.hasAttribute('label')) {\r\n      result.inputLabel = input.getAttribute('label');\r\n    }\r\n    if (input.hasAttribute('placeholder')) {\r\n      result.inputPlaceholder = input.getAttribute('placeholder');\r\n    }\r\n    if (input.hasAttribute('value')) {\r\n      result.inputValue = input.getAttribute('value');\r\n    }\r\n  }\r\n  /** @type {HTMLElement[]} */\r\n  const inputOptions = Array.from(templateContent.querySelectorAll('swal-input-option'));\r\n  if (inputOptions.length) {\r\n    result.inputOptions = {};\r\n    inputOptions.forEach(option => {\r\n      showWarningsForAttributes(option, ['value']);\r\n      const optionValue = option.getAttribute('value');\r\n      if (!optionValue) {\r\n        return;\r\n      }\r\n      const optionName = option.innerHTML;\r\n      result.inputOptions[optionValue] = optionName;\r\n    });\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * @param {DocumentFragment} templateContent\r\n * @param {string[]} paramNames\r\n * @returns {Record<string, any>}\r\n */\r\nconst getSwalStringParams = (templateContent, paramNames) => {\r\n  /** @type {Record<string, any>} */\r\n  const result = {};\r\n  for (const i in paramNames) {\r\n    const paramName = paramNames[i];\r\n    /** @type {HTMLElement | null} */\r\n    const tag = templateContent.querySelector(paramName);\r\n    if (tag) {\r\n      showWarningsForAttributes(tag, []);\r\n      result[paramName.replace(/^swal-/, '')] = tag.innerHTML.trim();\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * @param {DocumentFragment} templateContent\r\n */\r\nconst showWarningsForElements = templateContent => {\r\n  const allowedElements = swalStringParams.concat(['swal-param', 'swal-function-param', 'swal-button', 'swal-image', 'swal-icon', 'swal-input', 'swal-input-option']);\r\n  Array.from(templateContent.children).forEach(el => {\r\n    const tagName = el.tagName.toLowerCase();\r\n    if (!allowedElements.includes(tagName)) {\r\n      warn(`Unrecognized element <${tagName}>`);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {string[]} allowedAttributes\r\n */\r\nconst showWarningsForAttributes = (el, allowedAttributes) => {\r\n  Array.from(el.attributes).forEach(attribute => {\r\n    if (allowedAttributes.indexOf(attribute.name) === -1) {\r\n      warn([`Unrecognized attribute \"${attribute.name}\" on <${el.tagName.toLowerCase()}>.`, `${allowedAttributes.length ? `Allowed attributes are: ${allowedAttributes.join(', ')}` : 'To set the value, use HTML within the element.'}`]);\r\n    }\r\n  });\r\n};\r\n\r\nconst SHOW_CLASS_TIMEOUT = 10;\r\n\r\n/**\r\n * Open popup, add necessary classes and styles, fix scrollbar\r\n *\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst openPopup = params => {\r\n  const container = getContainer();\r\n  const popup = getPopup();\r\n  if (typeof params.willOpen === 'function') {\r\n    params.willOpen(popup);\r\n  }\r\n  globalState.eventEmitter.emit('willOpen', popup);\r\n  const bodyStyles = window.getComputedStyle(document.body);\r\n  const initialBodyOverflow = bodyStyles.overflowY;\r\n  addClasses(container, popup, params);\r\n\r\n  // scrolling is 'hidden' until animation is done, after that 'auto'\r\n  setTimeout(() => {\r\n    setScrollingVisibility(container, popup);\r\n  }, SHOW_CLASS_TIMEOUT);\r\n  if (isModal()) {\r\n    fixScrollContainer(container, params.scrollbarPadding, initialBodyOverflow);\r\n    setAriaHidden();\r\n  }\r\n  if (!isToast() && !globalState.previousActiveElement) {\r\n    globalState.previousActiveElement = document.activeElement;\r\n  }\r\n  if (typeof params.didOpen === 'function') {\r\n    setTimeout(() => params.didOpen(popup));\r\n  }\r\n  globalState.eventEmitter.emit('didOpen', popup);\r\n  removeClass(container, swalClasses['no-transition']);\r\n};\r\n\r\n/**\r\n * @param {AnimationEvent} event\r\n */\r\nconst swalOpenAnimationFinished = event => {\r\n  const popup = getPopup();\r\n  if (event.target !== popup) {\r\n    return;\r\n  }\r\n  const container = getContainer();\r\n  popup.removeEventListener('animationend', swalOpenAnimationFinished);\r\n  popup.removeEventListener('transitionend', swalOpenAnimationFinished);\r\n  container.style.overflowY = 'auto';\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} container\r\n * @param {HTMLElement} popup\r\n */\r\nconst setScrollingVisibility = (container, popup) => {\r\n  if (hasCssAnimation(popup)) {\r\n    container.style.overflowY = 'hidden';\r\n    popup.addEventListener('animationend', swalOpenAnimationFinished);\r\n    popup.addEventListener('transitionend', swalOpenAnimationFinished);\r\n  } else {\r\n    container.style.overflowY = 'auto';\r\n  }\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} container\r\n * @param {boolean} scrollbarPadding\r\n * @param {string} initialBodyOverflow\r\n */\r\nconst fixScrollContainer = (container, scrollbarPadding, initialBodyOverflow) => {\r\n  iOSfix();\r\n  if (scrollbarPadding && initialBodyOverflow !== 'hidden') {\r\n    replaceScrollbarWithPadding(initialBodyOverflow);\r\n  }\r\n\r\n  // sweetalert2/issues/1247\r\n  setTimeout(() => {\r\n    container.scrollTop = 0;\r\n  });\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} container\r\n * @param {HTMLElement} popup\r\n * @param {SweetAlertOptions} params\r\n */\r\nconst addClasses = (container, popup, params) => {\r\n  addClass(container, params.showClass.backdrop);\r\n  if (params.animation) {\r\n    // this workaround with opacity is needed for https://github.com/sweetalert2/sweetalert2/issues/2059\r\n    popup.style.setProperty('opacity', '0', 'important');\r\n    show(popup, 'grid');\r\n    setTimeout(() => {\r\n      // Animate popup right after showing it\r\n      addClass(popup, params.showClass.popup);\r\n      // and remove the opacity workaround\r\n      popup.style.removeProperty('opacity');\r\n    }, SHOW_CLASS_TIMEOUT); // 10ms in order to fix #2062\r\n  } else {\r\n    show(popup, 'grid');\r\n  }\r\n  addClass([document.documentElement, document.body], swalClasses.shown);\r\n  if (params.heightAuto && params.backdrop && !params.toast) {\r\n    addClass([document.documentElement, document.body], swalClasses['height-auto']);\r\n  }\r\n};\r\n\r\nvar defaultInputValidators = {\r\n  /**\r\n   * @param {string} string\r\n   * @param {string} [validationMessage]\r\n   * @returns {Promise<string | void>}\r\n   */\r\n  email: (string, validationMessage) => {\r\n    return /^[a-zA-Z0-9.+_'-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z0-9-]+$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid email address');\r\n  },\r\n  /**\r\n   * @param {string} string\r\n   * @param {string} [validationMessage]\r\n   * @returns {Promise<string | void>}\r\n   */\r\n  url: (string, validationMessage) => {\r\n    // taken from https://stackoverflow.com/a/3809435 with a small change from #1306 and #2013\r\n    return /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-z]{2,63}\\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid URL');\r\n  }\r\n};\r\n\r\n/**\r\n * @param {SweetAlertOptions} params\r\n */\r\nfunction setDefaultInputValidators(params) {\r\n  // Use default `inputValidator` for supported input types if not provided\r\n  if (params.inputValidator) {\r\n    return;\r\n  }\r\n  if (params.input === 'email') {\r\n    params.inputValidator = defaultInputValidators['email'];\r\n  }\r\n  if (params.input === 'url') {\r\n    params.inputValidator = defaultInputValidators['url'];\r\n  }\r\n}\r\n\r\n/**\r\n * @param {SweetAlertOptions} params\r\n */\r\nfunction validateCustomTargetElement(params) {\r\n  // Determine if the custom target element is valid\r\n  if (!params.target || typeof params.target === 'string' && !document.querySelector(params.target) || typeof params.target !== 'string' && !params.target.appendChild) {\r\n    warn('Target parameter is not valid, defaulting to \"body\"');\r\n    params.target = 'body';\r\n  }\r\n}\r\n\r\n/**\r\n * Set type, text and actions on popup\r\n *\r\n * @param {SweetAlertOptions} params\r\n */\r\nfunction setParameters(params) {\r\n  setDefaultInputValidators(params);\r\n\r\n  // showLoaderOnConfirm && preConfirm\r\n  if (params.showLoaderOnConfirm && !params.preConfirm) {\r\n    warn('showLoaderOnConfirm is set to true, but preConfirm is not defined.\\n' + 'showLoaderOnConfirm should be used together with preConfirm, see usage example:\\n' + 'https://sweetalert2.github.io/#ajax-request');\r\n  }\r\n  validateCustomTargetElement(params);\r\n\r\n  // Replace newlines with <br> in title\r\n  if (typeof params.title === 'string') {\r\n    params.title = params.title.split('\\n').join('<br />');\r\n  }\r\n  init(params);\r\n}\r\n\r\n/** @type {SweetAlert} */\r\nlet currentInstance;\r\nvar _promise = /*#__PURE__*/new WeakMap();\r\nclass SweetAlert {\r\n  /**\r\n   * @param {...any} args\r\n   * @this {SweetAlert}\r\n   */\r\n  constructor() {\r\n    /**\r\n     * @type {Promise<SweetAlertResult>}\r\n     */\r\n    _classPrivateFieldInitSpec(this, _promise, void 0);\r\n    // Prevent run in Node env\r\n    if (typeof window === 'undefined') {\r\n      return;\r\n    }\r\n    currentInstance = this;\r\n\r\n    // @ts-ignore\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    const outerParams = Object.freeze(this.constructor.argsToParams(args));\r\n\r\n    /** @type {Readonly<SweetAlertOptions>} */\r\n    this.params = outerParams;\r\n\r\n    /** @type {boolean} */\r\n    this.isAwaitingPromise = false;\r\n    _classPrivateFieldSet2(_promise, this, this._main(currentInstance.params));\r\n  }\r\n  _main(userParams) {\r\n    let mixinParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n    showWarningsForParams(Object.assign({}, mixinParams, userParams));\r\n    if (globalState.currentInstance) {\r\n      const swalPromiseResolve = privateMethods.swalPromiseResolve.get(globalState.currentInstance);\r\n      const {\r\n        isAwaitingPromise\r\n      } = globalState.currentInstance;\r\n      globalState.currentInstance._destroy();\r\n      if (!isAwaitingPromise) {\r\n        swalPromiseResolve({\r\n          isDismissed: true\r\n        });\r\n      }\r\n      if (isModal()) {\r\n        unsetAriaHidden();\r\n      }\r\n    }\r\n    globalState.currentInstance = currentInstance;\r\n    const innerParams = prepareParams(userParams, mixinParams);\r\n    setParameters(innerParams);\r\n    Object.freeze(innerParams);\r\n\r\n    // clear the previous timer\r\n    if (globalState.timeout) {\r\n      globalState.timeout.stop();\r\n      delete globalState.timeout;\r\n    }\r\n\r\n    // clear the restore focus timeout\r\n    clearTimeout(globalState.restoreFocusTimeout);\r\n    const domCache = populateDomCache(currentInstance);\r\n    render(currentInstance, innerParams);\r\n    privateProps.innerParams.set(currentInstance, innerParams);\r\n    return swalPromise(currentInstance, domCache, innerParams);\r\n  }\r\n\r\n  // `catch` cannot be the name of a module export, so we define our thenable methods here instead\r\n  then(onFulfilled) {\r\n    return _classPrivateFieldGet2(_promise, this).then(onFulfilled);\r\n  }\r\n  finally(onFinally) {\r\n    return _classPrivateFieldGet2(_promise, this).finally(onFinally);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @param {DomCache} domCache\r\n * @param {SweetAlertOptions} innerParams\r\n * @returns {Promise}\r\n */\r\nconst swalPromise = (instance, domCache, innerParams) => {\r\n  return new Promise((resolve, reject) => {\r\n    // functions to handle all closings/dismissals\r\n    /**\r\n     * @param {DismissReason} dismiss\r\n     */\r\n    const dismissWith = dismiss => {\r\n      instance.close({\r\n        isDismissed: true,\r\n        dismiss\r\n      });\r\n    };\r\n    privateMethods.swalPromiseResolve.set(instance, resolve);\r\n    privateMethods.swalPromiseReject.set(instance, reject);\r\n    domCache.confirmButton.onclick = () => {\r\n      handleConfirmButtonClick(instance);\r\n    };\r\n    domCache.denyButton.onclick = () => {\r\n      handleDenyButtonClick(instance);\r\n    };\r\n    domCache.cancelButton.onclick = () => {\r\n      handleCancelButtonClick(instance, dismissWith);\r\n    };\r\n    domCache.closeButton.onclick = () => {\r\n      dismissWith(DismissReason.close);\r\n    };\r\n    handlePopupClick(innerParams, domCache, dismissWith);\r\n    addKeydownHandler(globalState, innerParams, dismissWith);\r\n    handleInputOptionsAndValue(instance, innerParams);\r\n    openPopup(innerParams);\r\n    setupTimer(globalState, innerParams, dismissWith);\r\n    initFocus(domCache, innerParams);\r\n\r\n    // Scroll container to top on open (#1247, #1946)\r\n    setTimeout(() => {\r\n      domCache.container.scrollTop = 0;\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * @param {SweetAlertOptions} userParams\r\n * @param {SweetAlertOptions} mixinParams\r\n * @returns {SweetAlertOptions}\r\n */\r\nconst prepareParams = (userParams, mixinParams) => {\r\n  const templateParams = getTemplateParams(userParams);\r\n  const params = Object.assign({}, defaultParams, mixinParams, templateParams, userParams); // precedence is described in #2131\r\n  params.showClass = Object.assign({}, defaultParams.showClass, params.showClass);\r\n  params.hideClass = Object.assign({}, defaultParams.hideClass, params.hideClass);\r\n  if (params.animation === false) {\r\n    params.showClass = {\r\n      backdrop: 'swal2-noanimation'\r\n    };\r\n    params.hideClass = {};\r\n  }\r\n  return params;\r\n};\r\n\r\n/**\r\n * @param {SweetAlert} instance\r\n * @returns {DomCache}\r\n */\r\nconst populateDomCache = instance => {\r\n  const domCache = {\r\n    popup: getPopup(),\r\n    container: getContainer(),\r\n    actions: getActions(),\r\n    confirmButton: getConfirmButton(),\r\n    denyButton: getDenyButton(),\r\n    cancelButton: getCancelButton(),\r\n    loader: getLoader(),\r\n    closeButton: getCloseButton(),\r\n    validationMessage: getValidationMessage(),\r\n    progressSteps: getProgressSteps()\r\n  };\r\n  privateProps.domCache.set(instance, domCache);\r\n  return domCache;\r\n};\r\n\r\n/**\r\n * @param {GlobalState} globalState\r\n * @param {SweetAlertOptions} innerParams\r\n * @param {Function} dismissWith\r\n */\r\nconst setupTimer = (globalState, innerParams, dismissWith) => {\r\n  const timerProgressBar = getTimerProgressBar();\r\n  hide(timerProgressBar);\r\n  if (innerParams.timer) {\r\n    globalState.timeout = new Timer(() => {\r\n      dismissWith('timer');\r\n      delete globalState.timeout;\r\n    }, innerParams.timer);\r\n    if (innerParams.timerProgressBar) {\r\n      show(timerProgressBar);\r\n      applyCustomClass(timerProgressBar, innerParams, 'timerProgressBar');\r\n      setTimeout(() => {\r\n        if (globalState.timeout && globalState.timeout.running) {\r\n          // timer can be already stopped or unset at this point\r\n          animateTimerProgressBar(innerParams.timer);\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Initialize focus in the popup:\r\n *\r\n * 1. If `toast` is `true`, don't steal focus from the document.\r\n * 2. Else if there is an [autofocus] element, focus it.\r\n * 3. Else if `focusConfirm` is `true` and confirm button is visible, focus it.\r\n * 4. Else if `focusDeny` is `true` and deny button is visible, focus it.\r\n * 5. Else if `focusCancel` is `true` and cancel button is visible, focus it.\r\n * 6. Else focus the first focusable element in a popup (if any).\r\n *\r\n * @param {DomCache} domCache\r\n * @param {SweetAlertOptions} innerParams\r\n */\r\nconst initFocus = (domCache, innerParams) => {\r\n  if (innerParams.toast) {\r\n    return;\r\n  }\r\n  // TODO: this is dumb, remove `allowEnterKey` param in the next major version\r\n  if (!callIfFunction(innerParams.allowEnterKey)) {\r\n    warnAboutDeprecation('allowEnterKey');\r\n    blurActiveElement();\r\n    return;\r\n  }\r\n  if (focusAutofocus(domCache)) {\r\n    return;\r\n  }\r\n  if (focusButton(domCache, innerParams)) {\r\n    return;\r\n  }\r\n  setFocus(-1, 1);\r\n};\r\n\r\n/**\r\n * @param {DomCache} domCache\r\n * @returns {boolean}\r\n */\r\nconst focusAutofocus = domCache => {\r\n  const autofocusElements = Array.from(domCache.popup.querySelectorAll('[autofocus]'));\r\n  for (const autofocusElement of autofocusElements) {\r\n    if (autofocusElement instanceof HTMLElement && isVisible$1(autofocusElement)) {\r\n      autofocusElement.focus();\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * @param {DomCache} domCache\r\n * @param {SweetAlertOptions} innerParams\r\n * @returns {boolean}\r\n */\r\nconst focusButton = (domCache, innerParams) => {\r\n  if (innerParams.focusDeny && isVisible$1(domCache.denyButton)) {\r\n    domCache.denyButton.focus();\r\n    return true;\r\n  }\r\n  if (innerParams.focusCancel && isVisible$1(domCache.cancelButton)) {\r\n    domCache.cancelButton.focus();\r\n    return true;\r\n  }\r\n  if (innerParams.focusConfirm && isVisible$1(domCache.confirmButton)) {\r\n    domCache.confirmButton.focus();\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\nconst blurActiveElement = () => {\r\n  if (document.activeElement instanceof HTMLElement && typeof document.activeElement.blur === 'function') {\r\n    document.activeElement.blur();\r\n  }\r\n};\r\n\r\n// Dear russian users visiting russian sites. Let's have fun.\r\nif (typeof window !== 'undefined' && /^ru\\b/.test(navigator.language) && location.host.match(/\\.(ru|su|by|xn--p1ai)$/)) {\r\n  const now = new Date();\r\n  const initiationDate = localStorage.getItem('swal-initiation');\r\n  if (!initiationDate) {\r\n    localStorage.setItem('swal-initiation', `${now}`);\r\n  } else if ((now.getTime() - Date.parse(initiationDate)) / (1000 * 60 * 60 * 24) > 3) {\r\n    setTimeout(() => {\r\n      document.body.style.pointerEvents = 'none';\r\n      const ukrainianAnthem = document.createElement('audio');\r\n      ukrainianAnthem.src = 'https://flag-gimn.ru/wp-content/uploads/2021/09/Ukraina.mp3';\r\n      ukrainianAnthem.loop = true;\r\n      document.body.appendChild(ukrainianAnthem);\r\n      setTimeout(() => {\r\n        ukrainianAnthem.play().catch(() => {\r\n          // ignore\r\n        });\r\n      }, 2500);\r\n    }, 500);\r\n  }\r\n}\r\n\r\n// Assign instance methods from src/instanceMethods/*.js to prototype\r\nSweetAlert.prototype.disableButtons = disableButtons;\r\nSweetAlert.prototype.enableButtons = enableButtons;\r\nSweetAlert.prototype.getInput = getInput;\r\nSweetAlert.prototype.disableInput = disableInput;\r\nSweetAlert.prototype.enableInput = enableInput;\r\nSweetAlert.prototype.hideLoading = hideLoading;\r\nSweetAlert.prototype.disableLoading = hideLoading;\r\nSweetAlert.prototype.showValidationMessage = showValidationMessage;\r\nSweetAlert.prototype.resetValidationMessage = resetValidationMessage;\r\nSweetAlert.prototype.close = close;\r\nSweetAlert.prototype.closePopup = close;\r\nSweetAlert.prototype.closeModal = close;\r\nSweetAlert.prototype.closeToast = close;\r\nSweetAlert.prototype.rejectPromise = rejectPromise;\r\nSweetAlert.prototype.update = update;\r\nSweetAlert.prototype._destroy = _destroy;\r\n\r\n// Assign static methods from src/staticMethods/*.js to constructor\r\nObject.assign(SweetAlert, staticMethods);\r\n\r\n// Proxy to instance methods to constructor, for now, for backwards compatibility\r\nObject.keys(instanceMethods).forEach(key => {\r\n  /**\r\n   * @param {...any} args\r\n   * @returns {any | undefined}\r\n   */\r\n  SweetAlert[key] = function () {\r\n    if (currentInstance && currentInstance[key]) {\r\n      return currentInstance[key](...arguments);\r\n    }\r\n    return null;\r\n  };\r\n});\r\nSweetAlert.DismissReason = DismissReason;\r\nSweetAlert.version = '11.15.10';\r\n\r\nconst Swal = SweetAlert;\r\n// @ts-ignore\r\nSwal.default = Swal;\r\n\r\n\r\n\"undefined\"!=typeof document&&function(e,t){var n=e.createElement(\"style\");if(e.getElementsByTagName(\"head\")[0].appendChild(n),n.styleSheet)n.styleSheet.disabled||(n.styleSheet.cssText=t);else try{n.innerHTML=t}catch(e){n.innerText=t}}(document,\"body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto !important}body.swal2-no-backdrop .swal2-container{background-color:rgba(0,0,0,0) !important;pointer-events:none}body.swal2-no-backdrop .swal2-container .swal2-popup{pointer-events:all}body.swal2-no-backdrop .swal2-container .swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}body.swal2-toast-shown .swal2-container{box-sizing:border-box;width:360px;max-width:100%;background-color:rgba(0,0,0,0);pointer-events:none}body.swal2-toast-shown .swal2-container.swal2-top{inset:0 auto auto 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{inset:0 0 auto auto}body.swal2-toast-shown .swal2-container.swal2-top-start,body.swal2-toast-shown .swal2-container.swal2-top-left{inset:0 auto auto 0}body.swal2-toast-shown .swal2-container.swal2-center-start,body.swal2-toast-shown .swal2-container.swal2-center-left{inset:50% auto auto 0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{inset:50% auto auto 50%;transform:translate(-50%, -50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{inset:50% 0 auto auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-start,body.swal2-toast-shown .swal2-container.swal2-bottom-left{inset:auto auto 0 0}body.swal2-toast-shown .swal2-container.swal2-bottom{inset:auto auto 0 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{inset:auto 0 0 auto}@media print{body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown){overflow-y:scroll !important}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown) .swal2-container{position:static !important}}div:where(.swal2-container){display:grid;position:fixed;z-index:1060;inset:0;box-sizing:border-box;grid-template-areas:\\\"top-start     top            top-end\\\" \\\"center-start  center         center-end\\\" \\\"bottom-start  bottom-center  bottom-end\\\";grid-template-rows:minmax(min-content, auto) minmax(min-content, auto) minmax(min-content, auto);height:100%;padding:.625em;overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}div:where(.swal2-container).swal2-backdrop-show,div:where(.swal2-container).swal2-noanimation{background:rgba(0,0,0,.4)}div:where(.swal2-container).swal2-backdrop-hide{background:rgba(0,0,0,0) !important}div:where(.swal2-container).swal2-top-start,div:where(.swal2-container).swal2-center-start,div:where(.swal2-container).swal2-bottom-start{grid-template-columns:minmax(0, 1fr) auto auto}div:where(.swal2-container).swal2-top,div:where(.swal2-container).swal2-center,div:where(.swal2-container).swal2-bottom{grid-template-columns:auto minmax(0, 1fr) auto}div:where(.swal2-container).swal2-top-end,div:where(.swal2-container).swal2-center-end,div:where(.swal2-container).swal2-bottom-end{grid-template-columns:auto auto minmax(0, 1fr)}div:where(.swal2-container).swal2-top-start>.swal2-popup{align-self:start}div:where(.swal2-container).swal2-top>.swal2-popup{grid-column:2;place-self:start center}div:where(.swal2-container).swal2-top-end>.swal2-popup,div:where(.swal2-container).swal2-top-right>.swal2-popup{grid-column:3;place-self:start end}div:where(.swal2-container).swal2-center-start>.swal2-popup,div:where(.swal2-container).swal2-center-left>.swal2-popup{grid-row:2;align-self:center}div:where(.swal2-container).swal2-center>.swal2-popup{grid-column:2;grid-row:2;place-self:center center}div:where(.swal2-container).swal2-center-end>.swal2-popup,div:where(.swal2-container).swal2-center-right>.swal2-popup{grid-column:3;grid-row:2;place-self:center end}div:where(.swal2-container).swal2-bottom-start>.swal2-popup,div:where(.swal2-container).swal2-bottom-left>.swal2-popup{grid-column:1;grid-row:3;align-self:end}div:where(.swal2-container).swal2-bottom>.swal2-popup{grid-column:2;grid-row:3;place-self:end center}div:where(.swal2-container).swal2-bottom-end>.swal2-popup,div:where(.swal2-container).swal2-bottom-right>.swal2-popup{grid-column:3;grid-row:3;place-self:end end}div:where(.swal2-container).swal2-grow-row>.swal2-popup,div:where(.swal2-container).swal2-grow-fullscreen>.swal2-popup{grid-column:1/4;width:100%}div:where(.swal2-container).swal2-grow-column>.swal2-popup,div:where(.swal2-container).swal2-grow-fullscreen>.swal2-popup{grid-row:1/4;align-self:stretch}div:where(.swal2-container).swal2-no-transition{transition:none !important}div:where(.swal2-container) div:where(.swal2-popup){display:none;position:relative;box-sizing:border-box;grid-template-columns:minmax(0, 100%);width:32em;max-width:100%;padding:0 0 1.25em;border:none;border-radius:5px;background:#fff;color:#545454;font-family:inherit;font-size:1rem}div:where(.swal2-container) div:where(.swal2-popup):focus{outline:none}div:where(.swal2-container) div:where(.swal2-popup).swal2-loading{overflow-y:hidden}div:where(.swal2-container) div:where(.swal2-popup).swal2-draggable{cursor:grab}div:where(.swal2-container) div:where(.swal2-popup).swal2-draggable div:where(.swal2-icon){cursor:grab}div:where(.swal2-container) div:where(.swal2-popup).swal2-dragging{cursor:grabbing}div:where(.swal2-container) div:where(.swal2-popup).swal2-dragging div:where(.swal2-icon){cursor:grabbing}div:where(.swal2-container) h2:where(.swal2-title){position:relative;max-width:100%;margin:0;padding:.8em 1em 0;color:inherit;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word;cursor:initial}div:where(.swal2-container) div:where(.swal2-actions){display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:center;width:auto;margin:1.25em auto 0;padding:0}div:where(.swal2-container) div:where(.swal2-actions):not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}div:where(.swal2-container) div:where(.swal2-actions):not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1))}div:where(.swal2-container) div:where(.swal2-actions):not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2))}div:where(.swal2-container) div:where(.swal2-loader){display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 rgba(0,0,0,0) #2778c4 rgba(0,0,0,0)}div:where(.swal2-container) button:where(.swal2-styled){margin:.3125em;padding:.625em 1.1em;transition:box-shadow .1s;box-shadow:0 0 0 3px rgba(0,0,0,0);font-weight:500}div:where(.swal2-container) button:where(.swal2-styled):not([disabled]){cursor:pointer}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-confirm){border:0;border-radius:.25em;background:initial;background-color:#7066e0;color:#fff;font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-confirm):focus-visible{box-shadow:0 0 0 3px rgba(112,102,224,.5)}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-deny){border:0;border-radius:.25em;background:initial;background-color:#dc3741;color:#fff;font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-deny):focus-visible{box-shadow:0 0 0 3px rgba(220,55,65,.5)}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-cancel){border:0;border-radius:.25em;background:initial;background-color:#6e7881;color:#fff;font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-cancel):focus-visible{box-shadow:0 0 0 3px rgba(110,120,129,.5)}div:where(.swal2-container) button:where(.swal2-styled).swal2-default-outline:focus-visible{box-shadow:0 0 0 3px rgba(100,150,200,.5)}div:where(.swal2-container) button:where(.swal2-styled):focus-visible{outline:none}div:where(.swal2-container) button:where(.swal2-styled)::-moz-focus-inner{border:0}div:where(.swal2-container) div:where(.swal2-footer){margin:1em 0 0;padding:1em 1em 0;border-top:1px solid #eee;color:inherit;font-size:1em;text-align:center;cursor:initial}div:where(.swal2-container) .swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;grid-column:auto !important;overflow:hidden;border-bottom-right-radius:5px;border-bottom-left-radius:5px}div:where(.swal2-container) div:where(.swal2-timer-progress-bar){width:100%;height:.25em;background:rgba(0,0,0,.2)}div:where(.swal2-container) img:where(.swal2-image){max-width:100%;margin:2em auto 1em;cursor:initial}div:where(.swal2-container) button:where(.swal2-close){z-index:2;align-items:center;justify-content:center;width:1.2em;height:1.2em;margin-top:0;margin-right:0;margin-bottom:-1.2em;padding:0;overflow:hidden;transition:color .1s,box-shadow .1s;border:none;border-radius:5px;background:rgba(0,0,0,0);color:#ccc;font-family:monospace;font-size:2.5em;cursor:pointer;justify-self:end}div:where(.swal2-container) button:where(.swal2-close):hover{transform:none;background:rgba(0,0,0,0);color:#f27474}div:where(.swal2-container) button:where(.swal2-close):focus-visible{outline:none;box-shadow:inset 0 0 0 3px rgba(100,150,200,.5)}div:where(.swal2-container) button:where(.swal2-close)::-moz-focus-inner{border:0}div:where(.swal2-container) div:where(.swal2-html-container){z-index:1;justify-content:center;margin:0;padding:1em 1.6em .3em;overflow:auto;color:inherit;font-size:1.125em;font-weight:normal;line-height:normal;text-align:center;word-wrap:break-word;word-break:break-word;cursor:initial}div:where(.swal2-container) input:where(.swal2-input),div:where(.swal2-container) input:where(.swal2-file),div:where(.swal2-container) textarea:where(.swal2-textarea),div:where(.swal2-container) select:where(.swal2-select),div:where(.swal2-container) div:where(.swal2-radio),div:where(.swal2-container) label:where(.swal2-checkbox){margin:1em 2em 3px}div:where(.swal2-container) input:where(.swal2-input),div:where(.swal2-container) input:where(.swal2-file),div:where(.swal2-container) textarea:where(.swal2-textarea){box-sizing:border-box;width:auto;transition:border-color .1s,box-shadow .1s;border:1px solid #d9d9d9;border-radius:.1875em;background:rgba(0,0,0,0);box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(0,0,0,0);color:inherit;font-size:1.125em}div:where(.swal2-container) input:where(.swal2-input).swal2-inputerror,div:where(.swal2-container) input:where(.swal2-file).swal2-inputerror,div:where(.swal2-container) textarea:where(.swal2-textarea).swal2-inputerror{border-color:#f27474 !important;box-shadow:0 0 2px #f27474 !important}div:where(.swal2-container) input:where(.swal2-input):focus,div:where(.swal2-container) input:where(.swal2-file):focus,div:where(.swal2-container) textarea:where(.swal2-textarea):focus{border:1px solid #b4dbed;outline:none;box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(100,150,200,.5)}div:where(.swal2-container) input:where(.swal2-input)::placeholder,div:where(.swal2-container) input:where(.swal2-file)::placeholder,div:where(.swal2-container) textarea:where(.swal2-textarea)::placeholder{color:#ccc}div:where(.swal2-container) .swal2-range{margin:1em 2em 3px;background:#fff}div:where(.swal2-container) .swal2-range input{width:80%}div:where(.swal2-container) .swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}div:where(.swal2-container) .swal2-range input,div:where(.swal2-container) .swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}div:where(.swal2-container) .swal2-input{height:2.625em;padding:0 .75em}div:where(.swal2-container) .swal2-file{width:75%;margin-right:auto;margin-left:auto;background:rgba(0,0,0,0);font-size:1.125em}div:where(.swal2-container) .swal2-textarea{height:6.75em;padding:.75em}div:where(.swal2-container) .swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:rgba(0,0,0,0);color:inherit;font-size:1.125em}div:where(.swal2-container) .swal2-radio,div:where(.swal2-container) .swal2-checkbox{align-items:center;justify-content:center;background:#fff;color:inherit}div:where(.swal2-container) .swal2-radio label,div:where(.swal2-container) .swal2-checkbox label{margin:0 .6em;font-size:1.125em}div:where(.swal2-container) .swal2-radio input,div:where(.swal2-container) .swal2-checkbox input{flex-shrink:0;margin:0 .4em}div:where(.swal2-container) label:where(.swal2-input-label){display:flex;justify-content:center;margin:1em auto 0}div:where(.swal2-container) div:where(.swal2-validation-message){align-items:center;justify-content:center;margin:1em 0 0;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}div:where(.swal2-container) div:where(.swal2-validation-message)::before{content:\\\"!\\\";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}div:where(.swal2-container) .swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:1.25em auto;padding:0;background:rgba(0,0,0,0);font-weight:600}div:where(.swal2-container) .swal2-progress-steps li{display:inline-block;position:relative}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}div:where(.swal2-icon){position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:2.5em auto .6em;border:.25em solid rgba(0,0,0,0);border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;user-select:none}div:where(.swal2-icon) .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}div:where(.swal2-icon).swal2-error{border-color:#f27474;color:#f27474}div:where(.swal2-icon).swal2-error .swal2-x-mark{position:relative;flex-grow:1}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}div:where(.swal2-icon).swal2-error.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-error.swal2-icon-show .swal2-x-mark{animation:swal2-animate-error-x-mark .5s}div:where(.swal2-icon).swal2-warning{border-color:#f8bb86;color:#f8bb86}div:where(.swal2-icon).swal2-warning.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-warning.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .5s}div:where(.swal2-icon).swal2-info{border-color:#3fc3ee;color:#3fc3ee}div:where(.swal2-icon).swal2-info.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-info.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .8s}div:where(.swal2-icon).swal2-question{border-color:#87adbd;color:#87adbd}div:where(.swal2-icon).swal2-question.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-question.swal2-icon-show .swal2-icon-content{animation:swal2-animate-question-mark .8s}div:where(.swal2-icon).swal2-success{border-color:#a5dc86;color:#a5dc86}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;border-radius:50%}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}div:where(.swal2-icon).swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-0.25em;left:-0.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}div:where(.swal2-icon).swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}div:where(.swal2-icon).swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}div:where(.swal2-icon).swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}div:where(.swal2-icon).swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-animate-success-line-tip .75s}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-animate-success-line-long .75s}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-circular-line-right{animation:swal2-rotate-success-circular-line 4.25s ease-in}[class^=swal2]{-webkit-tap-highlight-color:rgba(0,0,0,0)}.swal2-show{animation:swal2-show .3s}.swal2-hide{animation:swal2-hide .15s forwards}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{margin-right:initial;margin-left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}.swal2-toast{box-sizing:border-box;grid-column:1/4 !important;grid-row:1/4 !important;grid-template-columns:min-content auto min-content;padding:1em;overflow-y:hidden;background:#fff;box-shadow:0 0 1px rgba(0,0,0,.075),0 1px 2px rgba(0,0,0,.075),1px 2px 4px rgba(0,0,0,.075),1px 3px 8px rgba(0,0,0,.075),2px 4px 16px rgba(0,0,0,.075);pointer-events:all}.swal2-toast>*{grid-column:2}.swal2-toast h2:where(.swal2-title){margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-toast .swal2-loading{justify-content:center}.swal2-toast input:where(.swal2-input){height:2em;margin:.5em;font-size:1em}.swal2-toast .swal2-validation-message{font-size:1em}.swal2-toast div:where(.swal2-footer){margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-toast button:where(.swal2-close){grid-column:3/3;grid-row:1/99;align-self:center;width:.8em;height:.8em;margin:0;font-size:2em}.swal2-toast div:where(.swal2-html-container){margin:.5em 1em;padding:0;overflow:initial;font-size:1em;text-align:initial}.swal2-toast div:where(.swal2-html-container):empty{padding:0}.swal2-toast .swal2-loader{grid-column:1;grid-row:1/99;align-self:center;width:2em;height:2em;margin:.25em}.swal2-toast .swal2-icon{grid-column:1;grid-row:1/99;align-self:center;width:2em;min-width:2em;height:2em;margin:0 .5em 0 0}.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:bold}.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-toast div:where(.swal2-actions){justify-content:flex-start;height:auto;margin:0;margin-top:.5em;padding:0 .5em}.swal2-toast button:where(.swal2-styled){margin:.25em .5em;padding:.4em .6em;font-size:1em}.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;border-radius:50%}.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.8em;left:-0.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-toast-animate-success-line-tip .75s}.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-toast-animate-success-line-long .75s}.swal2-toast.swal2-show{animation:swal2-toast-show .5s}.swal2-toast.swal2-hide{animation:swal2-toast-hide .1s forwards}@keyframes swal2-show{0%{transform:scale(0.7)}45%{transform:scale(1.05)}80%{transform:scale(0.95)}100%{transform:scale(1)}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(0.5);opacity:0}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-0.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(0.4);opacity:0}50%{margin-top:1.625em;transform:scale(0.4);opacity:0}80%{margin-top:-0.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0deg);opacity:1}}@keyframes swal2-rotate-loading{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-toast-show{0%{transform:translateY(-0.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(0.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0deg)}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-0.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sweetalert2/dist/sweetalert2.esm.all.js\n");

/***/ })

};
;